1
00:00:28,960 --> 00:00:31,960
e

2
00:00:58,640 --> 00:01:02,280
been people online to hear me

3
00:01:02,600 --> 00:01:04,239
well Yes sounds

4
00:01:04,239 --> 00:01:07,200
[Music]

5
00:01:07,200 --> 00:01:11,799
good okay now we are just

6
00:01:11,799 --> 00:01:16,840
about ready to start it says 14 past 10

7
00:01:16,840 --> 00:01:21,880
well now it's 15 bu okay perfect yeah uh

8
00:01:21,880 --> 00:01:25,479
okay so today's topic is about uh

9
00:01:25,479 --> 00:01:28,360
inheritance and if you're not yet

10
00:01:28,360 --> 00:01:30,479
familiar with what inheritance means

11
00:01:30,479 --> 00:01:33,560
then we're going to get to that

12
00:01:33,560 --> 00:01:38,320
um of course uh first obligatory mention

13
00:01:38,320 --> 00:01:41,399
of the visiting lecture that's coming

14
00:01:41,399 --> 00:01:45,040
up um I guess maybe I don't have any

15
00:01:45,040 --> 00:01:47,119
other announcements unless Anna has

16
00:01:47,119 --> 00:01:48,880
something to

17
00:01:48,880 --> 00:01:52,680
say no no just today is the deadline for

18
00:01:52,680 --> 00:01:55,880
uh lab memory but yeah true we moved the

19
00:01:55,880 --> 00:01:58,479
deadline because of the uh

20
00:01:58,479 --> 00:02:02,399
holiday uh so you still have until the

21
00:02:02,399 --> 00:02:05,840
end of today to complete that yeah

22
00:02:05,840 --> 00:02:09,598
that's it yeah that's

23
00:02:09,598 --> 00:02:11,840
good

24
00:02:11,840 --> 00:02:15,120
um okay yeah let's get get to the topic

25
00:02:15,120 --> 00:02:19,120
so so we've kind of talked about some

26
00:02:19,120 --> 00:02:21,959
topics of of objectoriented programming

27
00:02:21,959 --> 00:02:23,879
there's

28
00:02:23,879 --> 00:02:26,720
encapsulation uh

29
00:02:26,720 --> 00:02:31,680
polymorphism uh so then what is inher

30
00:02:31,680 --> 00:02:36,080
um so it means this hierar hierarchical

31
00:02:36,080 --> 00:02:38,680
relationship between classes where you

32
00:02:38,680 --> 00:02:41,920
have more General classes and then

33
00:02:41,920 --> 00:02:44,720
classes that inherit those more General

34
00:02:44,720 --> 00:02:48,720
classes and and get like that they're

35
00:02:48,720 --> 00:02:52,120
more specific they add like some things

36
00:02:52,120 --> 00:02:56,040
to a class that is more

37
00:02:56,040 --> 00:03:01,360
General uh and here is like a basic

38
00:03:01,360 --> 00:03:03,640
example uh and we'll kind of use this

39
00:03:03,640 --> 00:03:08,560
example throughout this lecture um so we

40
00:03:08,560 --> 00:03:10,920
have sphere class here and then we have

41
00:03:10,920 --> 00:03:15,040
ball class and then you can see that uh

42
00:03:15,040 --> 00:03:20,359
little text after declaring the ball

43
00:03:20,440 --> 00:03:24,480
class uh so yeah these are the the

44
00:03:24,480 --> 00:03:28,040
sphere is the base class here the more

45
00:03:28,040 --> 00:03:30,519
General class

46
00:03:30,519 --> 00:03:33,239
and then ball is the derived class which

47
00:03:33,239 --> 00:03:37,200
is more specific so maybe if you look at

48
00:03:37,200 --> 00:03:39,519
these you you think like okay well they

49
00:03:39,519 --> 00:03:43,599
seem just about as like complex but uh

50
00:03:43,599 --> 00:03:45,959
the idea is that everything that's in

51
00:03:45,959 --> 00:03:49,799
the base class is also in the D derived

52
00:03:49,799 --> 00:03:54,439
class so that's how it gets kind of more

53
00:03:54,439 --> 00:03:58,400
complicated the lower you go in the

54
00:03:58,400 --> 00:04:00,239
hierarchy uh

55
00:04:00,239 --> 00:04:03,000
and then if you're

56
00:04:03,200 --> 00:04:08,760
thinking why does it say public there so

57
00:04:08,760 --> 00:04:11,760
so that means the that that refers to

58
00:04:11,760 --> 00:04:13,799
the inheritance

59
00:04:13,799 --> 00:04:19,000
type uh so how do we inherit this sphere

60
00:04:19,000 --> 00:04:21,519
class and in this case we're inheriting

61
00:04:21,519 --> 00:04:24,720
it publicly so that means that we're

62
00:04:24,720 --> 00:04:28,560
going to keep all the

63
00:04:28,560 --> 00:04:30,440
public uh

64
00:04:30,440 --> 00:04:32,919
methods and properties as

65
00:04:32,919 --> 00:04:36,080
public but of course things that were

66
00:04:36,080 --> 00:04:39,240
declared as private are still going to

67
00:04:39,240 --> 00:04:42,960
remain private so the idea is that the

68
00:04:42,960 --> 00:04:46,840
more restrictive access type applies for

69
00:04:46,840 --> 00:04:50,479
the D derived class and most of the

70
00:04:50,479 --> 00:04:53,759
cases I think you're going to just use

71
00:04:53,759 --> 00:04:56,560
public

72
00:04:57,639 --> 00:05:00,479
inheritance uh but that is something you

73
00:05:00,479 --> 00:05:03,280
can do where you you kind

74
00:05:03,280 --> 00:05:07,120
of add some additional restrictions to

75
00:05:07,120 --> 00:05:10,960
the class access when you go down in the

76
00:05:10,960 --> 00:05:14,639
hierarchy uh and another important note

77
00:05:14,639 --> 00:05:16,560
is that private members of the base

78
00:05:16,560 --> 00:05:19,840
class are not accessible by the druged

79
00:05:19,840 --> 00:05:23,720
class so you can see that there's the

80
00:05:23,720 --> 00:05:26,440
sphere class has

81
00:05:26,440 --> 00:05:30,639
radius so then in the ball class

82
00:05:30,639 --> 00:05:34,080
we can just

83
00:05:34,240 --> 00:05:37,759
like use radius just like that not that

84
00:05:37,759 --> 00:05:40,160
easily so then instead if we want to

85
00:05:40,160 --> 00:05:42,280
manipulate it we need to

86
00:05:42,280 --> 00:05:47,120
use uh for example the set radius

87
00:05:47,120 --> 00:05:50,039
function and yeah yeah you might

88
00:05:50,039 --> 00:05:53,440
initially think that oh this is really

89
00:05:53,440 --> 00:05:56,800
restrictive um but you know

90
00:05:56,800 --> 00:06:01,520
maybe maybe if um

91
00:06:01,520 --> 00:06:04,039
the idea is that when you change the

92
00:06:04,039 --> 00:06:07,759
radius then it pre-calculates the

93
00:06:07,759 --> 00:06:10,120
volume maybe for that reason you would

94
00:06:10,120 --> 00:06:12,759
want to control this through the set

95
00:06:12,759 --> 00:06:15,919
radius function and then you kind of

96
00:06:15,919 --> 00:06:19,560
Define this flow in the sphere class and

97
00:06:19,560 --> 00:06:21,840
then the uh derived

98
00:06:21,840 --> 00:06:25,280
classes uh just take that as it is and

99
00:06:25,280 --> 00:06:29,840
it kind of retains the flow of the L how

100
00:06:29,840 --> 00:06:33,000
to use the class so in the end you'll

101
00:06:33,000 --> 00:06:35,360
find that it really makes sense that you

102
00:06:35,360 --> 00:06:40,639
can't access the private

103
00:06:40,639 --> 00:06:44,680
members um but if you want to you can

104
00:06:44,680 --> 00:06:47,400
also use the protected keyword which is

105
00:06:47,400 --> 00:06:49,560
the third access type so is public

106
00:06:49,560 --> 00:06:52,960
private and protected so protected are

107
00:06:52,960 --> 00:06:56,080
accessible by D derived

108
00:06:56,080 --> 00:07:00,479
class uh but there's still in accessible

109
00:07:00,479 --> 00:07:03,039
outside the class

110
00:07:03,039 --> 00:07:07,800
so uh so for for example

111
00:07:08,160 --> 00:07:11,160
if

112
00:07:11,720 --> 00:07:15,599
uh well in in in any situation if you

113
00:07:15,599 --> 00:07:19,360
specifically create a sphere even if you

114
00:07:19,360 --> 00:07:22,000
create the sphere inside the ball class

115
00:07:22,000 --> 00:07:24,720
in some function you you won't be able

116
00:07:24,720 --> 00:07:28,520
to uh access the surface area

117
00:07:28,520 --> 00:07:31,319
but but it's kind of like you can

118
00:07:31,319 --> 00:07:34,000
imagine that if it says protected there

119
00:07:34,000 --> 00:07:37,160
then it's kind of like it was uh private

120
00:07:37,160 --> 00:07:39,479
in the in the derived class so you can

121
00:07:39,479 --> 00:07:41,840
access it within the class but not from

122
00:07:41,840 --> 00:07:44,000
the

123
00:07:44,599 --> 00:07:48,479
outside and this should become clearer

124
00:07:48,479 --> 00:07:50,520
over time as you kind of guess in

125
00:07:50,520 --> 00:07:52,759
practice with them might seem confusing

126
00:07:52,759 --> 00:07:54,159
at

127
00:07:54,159 --> 00:07:57,720
first uh okay well let's look at some uh

128
00:07:57,720 --> 00:08:00,800
like practical

129
00:08:00,800 --> 00:08:02,639
uh

130
00:08:02,639 --> 00:08:04,879
examples now

131
00:08:04,879 --> 00:08:08,879
so here we have so so we're using kind

132
00:08:08,879 --> 00:08:11,840
of the uh definitions for for sphere and

133
00:08:11,840 --> 00:08:15,720
ball uh from before and then we'll have

134
00:08:15,720 --> 00:08:19,560
this like simple main function and then

135
00:08:19,560 --> 00:08:22,759
a couple other like kind of we get more

136
00:08:22,759 --> 00:08:26,280
more on the um things on the right side

137
00:08:26,280 --> 00:08:29,319
here later but first uh let's look at

138
00:08:29,319 --> 00:08:34,159
like how this program is going to work

139
00:08:34,159 --> 00:08:36,120
I'll also show like actually running the

140
00:08:36,120 --> 00:08:39,958
code in a bit but uh let's first like

141
00:08:39,958 --> 00:08:42,159
kind of go through what's going on here

142
00:08:42,159 --> 00:08:45,399
so so okay so we the

143
00:08:45,399 --> 00:08:49,440
ball the ball B uh calls the function

144
00:08:49,440 --> 00:08:50,320
get

145
00:08:50,320 --> 00:08:53,920
volume and get volume uh which remember

146
00:08:53,920 --> 00:08:56,080
we defined the function in the steere

147
00:08:56,080 --> 00:08:58,959
class so so yeah the ball can access the

148
00:08:58,959 --> 00:09:00,160
function

149
00:09:00,160 --> 00:09:02,079
that's defined in in the sphere class

150
00:09:02,079 --> 00:09:04,959
that's okay that's exactly how

151
00:09:04,959 --> 00:09:07,480
inheritance is supposed to

152
00:09:07,480 --> 00:09:10,839
work and then we have this print volume

153
00:09:10,839 --> 00:09:14,399
function uh and we have the sphere and

154
00:09:14,399 --> 00:09:16,399
the print volume takes spere as argument

155
00:09:16,399 --> 00:09:20,560
so no problem we pass that there uh and

156
00:09:20,560 --> 00:09:22,320
you'll remember from previous lectures

157
00:09:22,320 --> 00:09:24,440
that that means that is going to create

158
00:09:24,440 --> 00:09:25,399
a

159
00:09:25,399 --> 00:09:28,640
copy uh so then it calls the Constructor

160
00:09:28,640 --> 00:09:30,440
makes a new sphere

161
00:09:30,440 --> 00:09:33,640
uh but in any case this is normal

162
00:09:33,640 --> 00:09:37,760
behavior but then what if we try to pass

163
00:09:37,760 --> 00:09:41,079
a ball as argument to this function that

164
00:09:41,079 --> 00:09:43,640
that's supposed to take a

165
00:09:43,640 --> 00:09:48,720
sphere uh okay so here is a question for

166
00:09:48,720 --> 00:09:53,399
you so can we create a sphere out of a

167
00:09:53,399 --> 00:09:56,560
ball with default Constructor so can we

168
00:09:56,560 --> 00:10:01,319
do that which I just showed

169
00:10:01,920 --> 00:10:05,600
here and uh if you yeah I didn't have

170
00:10:05,600 --> 00:10:09,720
any slido slides before but yeah if you

171
00:10:09,720 --> 00:10:12,720
type in the address slo.com and put in

172
00:10:12,720 --> 00:10:15,880
the number then you can enter and vote

173
00:10:15,880 --> 00:10:17,839
or of course use the QR code there's

174
00:10:17,839 --> 00:10:19,279
going to be a couple other questions

175
00:10:19,279 --> 00:10:22,399
later in the lecture so if you join now

176
00:10:22,399 --> 00:10:25,360
then you'll easily be able

177
00:10:25,360 --> 00:10:28,320
to uh attend the

178
00:10:28,320 --> 00:10:31,320
following

179
00:10:47,360 --> 00:10:51,040
HS and also the the Q&A I don't have

180
00:10:51,040 --> 00:10:53,800
separate Q&A slides but you can always

181
00:10:53,800 --> 00:10:55,880
access that from slido and and I'll be

182
00:10:55,880 --> 00:10:58,240
able to see them uh the the questions

183
00:10:58,240 --> 00:11:01,240
you put there

184
00:11:01,639 --> 00:11:06,959
um okay so we're getting a very even uh

185
00:11:06,959 --> 00:11:08,120
split

186
00:11:08,120 --> 00:11:12,880
here okay the majority is voting

187
00:11:14,160 --> 00:11:18,720
no uh and the the answer

188
00:11:18,720 --> 00:11:21,440
is that is actually

189
00:11:21,440 --> 00:11:24,120
possible uh and what happens in that

190
00:11:24,120 --> 00:11:28,079
case is that it kind of just slices away

191
00:11:28,079 --> 00:11:30,000
uh the

192
00:11:30,000 --> 00:11:33,800
extra properties of the derived class

193
00:11:33,800 --> 00:11:37,760
and retains only those that belong into

194
00:11:37,760 --> 00:11:39,160
the sphere

195
00:11:39,160 --> 00:11:42,440
class uh and

196
00:11:42,440 --> 00:11:45,040
this for for this that there is like a

197
00:11:45,040 --> 00:11:46,560
default

198
00:11:46,560 --> 00:11:49,639
Constructor uh that can be used of

199
00:11:49,639 --> 00:11:52,240
course you can also Define one yourself

200
00:11:52,240 --> 00:11:55,360
where you could maybe change somehow the

201
00:11:55,360 --> 00:11:58,880
way it works uh but you can do this even

202
00:11:58,880 --> 00:12:00,760
by

203
00:12:00,760 --> 00:12:04,240
default okay well the next question then

204
00:12:04,240 --> 00:12:09,360
is can we uh

205
00:12:09,360 --> 00:12:13,279
create a ball out of a sphere did did I

206
00:12:13,279 --> 00:12:16,839
get the questions correct yeah yeah so

207
00:12:16,839 --> 00:12:18,440
previously can we create a sphere out of

208
00:12:18,440 --> 00:12:20,959
ball but now can we create a ball out of

209
00:12:20,959 --> 00:12:23,519
a sphere so if you look on the right

210
00:12:23,519 --> 00:12:26,800
side uh imagine that we actually like

211
00:12:26,800 --> 00:12:29,920
properly defined those as well uh

212
00:12:29,920 --> 00:12:33,440
but yeah another question for slido can

213
00:12:33,440 --> 00:12:36,920
we create a ball out of a sphere with

214
00:12:36,920 --> 00:12:39,439
default

215
00:12:52,440 --> 00:12:54,240
Constructors maybe the fact that we

216
00:12:54,240 --> 00:12:56,399
could do the do it the other way gave

217
00:12:56,399 --> 00:12:58,240
you some confidence that we can also do

218
00:12:58,240 --> 00:13:01,120
it this way

219
00:13:02,600 --> 00:13:04,839
but even then the majority

220
00:13:04,839 --> 00:13:08,399
is voting

221
00:13:08,440 --> 00:13:13,040
no okay and the answer is that you can't

222
00:13:13,040 --> 00:13:17,079
do that and uh for this case you need to

223
00:13:17,079 --> 00:13:18,600
Define your

224
00:13:18,600 --> 00:13:21,199
own uh

225
00:13:21,199 --> 00:13:25,000
Constructor kind of like as you can see

226
00:13:25,000 --> 00:13:28,600
uh down at the bottom so you can have a

227
00:13:28,600 --> 00:13:31,199
Constructor for for ball that takes a

228
00:13:31,199 --> 00:13:34,079
reference to a sphere and

229
00:13:34,079 --> 00:13:37,199
then you can Define it to work in in

230
00:13:37,199 --> 00:13:38,959
whatever way you

231
00:13:38,959 --> 00:13:43,040
want the what you would

232
00:13:43,040 --> 00:13:46,720
expect how it works is that it basically

233
00:13:46,720 --> 00:13:50,519
would use like default

234
00:13:50,519 --> 00:13:52,240
Constructor

235
00:13:52,240 --> 00:13:56,920
um initialization for for whatever is uh

236
00:13:56,920 --> 00:13:59,880
not defined by the sphere or

237
00:13:59,880 --> 00:14:03,800
so in this case um a sphere has

238
00:14:03,800 --> 00:14:05,880
everything that the ball has except a

239
00:14:05,880 --> 00:14:08,959
name it doesn't have a name so then we

240
00:14:08,959 --> 00:14:12,320
just need to come up with a name uh from

241
00:14:12,320 --> 00:14:14,560
from

242
00:14:14,639 --> 00:14:18,160
somewhere and

243
00:14:18,240 --> 00:14:20,279
uh

244
00:14:20,279 --> 00:14:23,160
I'll I'll show a

245
00:14:23,160 --> 00:14:26,240
little example I should

246
00:14:26,240 --> 00:14:30,680
have basically the same

247
00:14:30,680 --> 00:14:32,720
thing

248
00:14:32,720 --> 00:14:35,560
here so just to kind of show that this

249
00:14:35,560 --> 00:14:38,959
works so I have defined like the those

250
00:14:38,959 --> 00:14:42,120
things here just have some like basic

251
00:14:42,120 --> 00:14:46,320
things over here uh

252
00:14:47,480 --> 00:14:52,360
so so if we do this s equals

253
00:14:52,360 --> 00:14:55,360
B

254
00:14:58,040 --> 00:15:00,959
and

255
00:15:00,959 --> 00:15:05,639
yeah we can see that this is fine no

256
00:15:05,639 --> 00:15:07,959
problem and

257
00:15:07,959 --> 00:15:11,800
then b equals

258
00:15:12,759 --> 00:15:15,399
s and now we get some kind of error like

259
00:15:15,399 --> 00:15:17,360
like what what what is this that we

260
00:15:17,360 --> 00:15:18,600
can't do

261
00:15:18,600 --> 00:15:20,320
this

262
00:15:20,320 --> 00:15:22,959
um but then

263
00:15:22,959 --> 00:15:25,279
I'll I'll show right

264
00:15:25,279 --> 00:15:30,600
away uh how you can make it work so

265
00:15:30,600 --> 00:15:33,759
let's just do

266
00:15:42,279 --> 00:15:44,639
this find these things in the in the

267
00:15:44,639 --> 00:15:49,240
same file so you can see everything at

268
00:15:52,160 --> 00:15:53,839
once

269
00:15:53,839 --> 00:15:56,920
this and then when when

270
00:15:56,920 --> 00:16:00,639
we when we construct

271
00:16:00,639 --> 00:16:02,959
uh a ball yeah you can actually see here

272
00:16:02,959 --> 00:16:05,680
also uh so it it says like spere

273
00:16:05,680 --> 00:16:07,759
constructed two times and then when it

274
00:16:07,759 --> 00:16:10,000
says pom pom constructed that was like

275
00:16:10,000 --> 00:16:12,519
when it constructed the ball and it it

276
00:16:12,519 --> 00:16:15,160
printed the name of it uh so the reason

277
00:16:15,160 --> 00:16:17,560
you can see that it Go constructed two

278
00:16:17,560 --> 00:16:22,120
times is that when you uh initialize a

279
00:16:22,120 --> 00:16:25,240
drive class then it uh by default like

280
00:16:25,240 --> 00:16:28,319
uses the Constructor of the base class

281
00:16:28,319 --> 00:16:29,440
to like

282
00:16:29,440 --> 00:16:32,480
initialize kind of on that level first

283
00:16:32,480 --> 00:16:34,680
and then initialize the things that are

284
00:16:34,680 --> 00:16:38,199
unique to the derived

285
00:16:38,199 --> 00:16:43,120
class uh so now we could do something

286
00:16:43,120 --> 00:16:46,120
like

287
00:16:49,560 --> 00:16:53,800
uh something like

288
00:16:57,839 --> 00:17:00,839
this

289
00:17:06,240 --> 00:17:09,480
okay I'm now now it's fine so so now

290
00:17:09,480 --> 00:17:13,199
what what this does is uh so construct

291
00:17:13,199 --> 00:17:14,720
the

292
00:17:14,720 --> 00:17:17,919
sphere uh con constructive properties of

293
00:17:17,919 --> 00:17:21,319
the like sphere and then also just give

294
00:17:21,319 --> 00:17:23,439
it some kind of name so that's kind of

295
00:17:23,439 --> 00:17:25,240
one way we

296
00:17:25,240 --> 00:17:30,400
can make this work uh okay but more

297
00:17:30,400 --> 00:17:33,760
examples uh coming up but let's proceed

298
00:17:33,760 --> 00:17:35,760
for now with the

299
00:17:35,760 --> 00:17:37,960
slides

300
00:17:37,960 --> 00:17:41,480
um so then we have another kind of

301
00:17:41,480 --> 00:17:45,320
situation so if we're using

302
00:17:45,320 --> 00:17:47,760
pointers we have this kind of uh

303
00:17:47,760 --> 00:17:53,160
situation where we have a display

304
00:17:53,160 --> 00:17:56,440
function defined in both the sphere and

305
00:17:56,440 --> 00:17:57,120
the

306
00:17:57,120 --> 00:17:59,960
ball uh in in the the case of the ball

307
00:17:59,960 --> 00:18:02,919
we can print both the name and and the

308
00:18:02,919 --> 00:18:05,159
volume because it has both of those and

309
00:18:05,159 --> 00:18:07,760
in the case of sphere we can only print

310
00:18:07,760 --> 00:18:10,520
the volume there's nothing else really

311
00:18:10,520 --> 00:18:13,080
uh to be

312
00:18:13,720 --> 00:18:16,240
printed uh so then if we have a

313
00:18:16,240 --> 00:18:19,120
situation like this where we create this

314
00:18:19,120 --> 00:18:23,679
new spere and we create a new ball and

315
00:18:23,679 --> 00:18:26,200
then those are in the Heap and we have

316
00:18:26,200 --> 00:18:31,080
pointers to them and then we this

317
00:18:31,080 --> 00:18:34,080
sphere pointer to

318
00:18:34,080 --> 00:18:37,919
point um at the ball and then we try to

319
00:18:37,919 --> 00:18:40,200
display so what do you think will happen

320
00:18:40,200 --> 00:18:42,600
in this

321
00:18:43,440 --> 00:18:48,840
case uh well I don't have slide over of

322
00:18:48,840 --> 00:18:51,960
this I'll just uh kind

323
00:18:51,960 --> 00:18:55,679
of move on here so what happens in this

324
00:18:55,679 --> 00:18:57,720
case is

325
00:18:57,720 --> 00:19:00,440
that it's like okay well well I'm I'm a

326
00:19:00,440 --> 00:19:03,400
sphere pointer so so what I do is point

327
00:19:03,400 --> 00:19:07,919
at the sphere function so uh so I I'll

328
00:19:07,919 --> 00:19:10,280
use that function it doesn't realize

329
00:19:10,280 --> 00:19:15,039
that uh it's actually a bow now well

330
00:19:15,039 --> 00:19:16,720
later we're

331
00:19:16,720 --> 00:19:20,919
GNA get into how to fix this but

332
00:19:20,919 --> 00:19:24,760
um for for now it's like this it's not

333
00:19:24,760 --> 00:19:27,880
it works you can do this but it's

334
00:19:27,880 --> 00:19:29,559
probably doesn't work exactly how you

335
00:19:29,559 --> 00:19:32,679
would want it to work and of course if

336
00:19:32,679 --> 00:19:35,679
we're doing this then we're also just

337
00:19:35,679 --> 00:19:38,320
kind of ditching the spere that we

338
00:19:38,320 --> 00:19:40,799
created and and leaking memory which is

339
00:19:40,799 --> 00:19:43,320
not good and then we have this kind of

340
00:19:43,320 --> 00:19:46,039
situation where the S pointer only sees

341
00:19:46,039 --> 00:19:49,840
this like limited scope of the SP and

342
00:19:49,840 --> 00:19:54,199
then the B pointer sees the whole

343
00:19:54,799 --> 00:19:56,480
thing

344
00:19:56,480 --> 00:20:00,600
um okay and then

345
00:20:00,600 --> 00:20:04,640
if we try to do it the other way we'll

346
00:20:04,640 --> 00:20:07,200
actually find that that that also

347
00:20:07,200 --> 00:20:10,400
creates an error we we can't

348
00:20:10,400 --> 00:20:11,919
actually

349
00:20:11,919 --> 00:20:16,520
uh assign a sphere pointer to a ball

350
00:20:16,520 --> 00:20:18,640
because that that creates this kind of

351
00:20:18,640 --> 00:20:23,039
confusing situation where uh now

352
00:20:23,039 --> 00:20:27,520
B is pointing at this sphere but it

353
00:20:27,520 --> 00:20:29,919
thinks that it's a ball so so it thinks

354
00:20:29,919 --> 00:20:32,039
that there should be a name

355
00:20:32,039 --> 00:20:34,600
somewhere and and it thinks that this is

356
00:20:34,600 --> 00:20:36,159
the right function to

357
00:20:36,159 --> 00:20:40,159
call tries to get the name of it and

358
00:20:40,159 --> 00:20:43,080
then what happens well we don't TR know

359
00:20:43,080 --> 00:20:46,240
what happens because it's uh undefined

360
00:20:46,240 --> 00:20:50,320
Behavior well uh also if you try to just

361
00:20:50,320 --> 00:20:52,919
directly do b equals s that's an error

362
00:20:52,919 --> 00:20:54,960
but if you specifically

363
00:20:54,960 --> 00:20:57,600
cast s to

364
00:20:57,600 --> 00:21:01,640
be a ball pointer then then we get this

365
00:21:01,640 --> 00:21:04,039
situation so so this is natur really

366
00:21:04,039 --> 00:21:06,240
something that that you should

367
00:21:06,240 --> 00:21:11,320
be doing not not not like this

368
00:21:16,840 --> 00:21:20,600
anyway okay and then we get

369
00:21:20,600 --> 00:21:26,799
to how we can fix the situation so um so

370
00:21:26,799 --> 00:21:29,400
I'll introduce this

371
00:21:29,400 --> 00:21:32,039
virtual functions or or I guess the

372
00:21:32,039 --> 00:21:35,200
virtual keyword uh

373
00:21:35,200 --> 00:21:39,080
so here we're putting this virtual

374
00:21:39,080 --> 00:21:41,520
keyword in front of

375
00:21:41,520 --> 00:21:44,760
the display function

376
00:21:44,760 --> 00:21:47,559
declaration and you only really need to

377
00:21:47,559 --> 00:21:50,679
put it in the base class because then it

378
00:21:50,679 --> 00:21:52,840
kind of automatically

379
00:21:52,840 --> 00:21:57,520
retains uh that property uh in in all

380
00:21:57,520 --> 00:21:59,720
the derived classes

381
00:21:59,720 --> 00:22:02,320
but a lot of the time you'll see that

382
00:22:02,320 --> 00:22:04,520
the virtual keyword is used throughout

383
00:22:04,520 --> 00:22:08,279
so then it makes it a little clearer

384
00:22:08,279 --> 00:22:12,279
that uh that is what's going

385
00:22:12,279 --> 00:22:15,080
on so so what it

386
00:22:15,080 --> 00:22:18,640
does is that it enables this Dynamic

387
00:22:18,640 --> 00:22:20,320
function

388
00:22:20,320 --> 00:22:22,159
binding

389
00:22:22,159 --> 00:22:27,200
so the correct function to call is is

390
00:22:27,200 --> 00:22:30,159
determined a front time or or it might

391
00:22:30,159 --> 00:22:32,960
be optimized in the in the

392
00:22:32,960 --> 00:22:36,000
compiler uh it depends how how the

393
00:22:36,000 --> 00:22:39,400
program is

394
00:22:39,640 --> 00:22:41,679
fr

395
00:22:41,679 --> 00:22:46,520
um yeah if we do this and then we create

396
00:22:46,520 --> 00:22:50,520
this s and we have this spere pointer

397
00:22:50,520 --> 00:22:53,600
and then we make it point to a ball

398
00:22:53,600 --> 00:22:56,360
instead then it's actually smart and it

399
00:22:56,360 --> 00:22:59,880
realizes like okay well I see a ball

400
00:22:59,880 --> 00:23:03,039
here so I'm going to use this uh ball

401
00:23:03,039 --> 00:23:04,720
display

402
00:23:04,720 --> 00:23:07,760
function so then everything's fine and

403
00:23:07,760 --> 00:23:10,120
this is a very common scenario that

404
00:23:10,120 --> 00:23:14,880
you'll also see that uh well not really

405
00:23:14,880 --> 00:23:16,320
for like individual pointers but it's

406
00:23:16,320 --> 00:23:19,960
very common to have these bigger arrays

407
00:23:19,960 --> 00:23:21,720
of

408
00:23:21,720 --> 00:23:25,279
um pointers to the base class and then

409
00:23:25,279 --> 00:23:29,159
we can put all the different DED objects

410
00:23:29,159 --> 00:23:31,760
to the same array and

411
00:23:31,760 --> 00:23:34,640
then call the functions by the same name

412
00:23:34,640 --> 00:23:38,840
for all of them but then it'll always

413
00:23:38,840 --> 00:23:41,919
know which function to call based on

414
00:23:41,919 --> 00:23:46,120
what object it actually is

415
00:23:46,480 --> 00:23:50,080
underneath uh okay and then once again

416
00:23:50,080 --> 00:23:52,439
if

417
00:23:52,640 --> 00:23:57,080
we try to have the ball pointer point at

418
00:23:57,080 --> 00:23:59,120
the sphere then we get an error

419
00:23:59,120 --> 00:24:03,520
error um so changing making it virtual

420
00:24:03,520 --> 00:24:06,240
doesn't change that

421
00:24:06,240 --> 00:24:10,320
um we can still cast it and then what

422
00:24:10,320 --> 00:24:14,000
will happen then is basically as we

423
00:24:14,000 --> 00:24:17,120
would expect it also works the other way

424
00:24:17,120 --> 00:24:20,520
uh so it realizes

425
00:24:20,520 --> 00:24:24,080
that okay like like sure I'm a ball

426
00:24:24,080 --> 00:24:27,880
pointer but this does look like a sphere

427
00:24:27,880 --> 00:24:29,720
so

428
00:24:29,720 --> 00:24:31,640
so then I'll use that

429
00:24:31,640 --> 00:24:33,919
function but but even then this is kind

430
00:24:33,919 --> 00:24:37,799
of a weird to do this way uh you

431
00:24:37,799 --> 00:24:41,840
probably wouldn't do it this

432
00:24:41,919 --> 00:24:44,520
way

433
00:24:44,520 --> 00:24:46,279
um

434
00:24:46,279 --> 00:24:50,120
okay but then a little little bit of

435
00:24:50,120 --> 00:24:53,840
like theory about the virtual functions

436
00:24:53,840 --> 00:24:58,480
so so a derived class can override

437
00:24:58,480 --> 00:25:02,360
virtual methods but it isn't required so

438
00:25:02,360 --> 00:25:06,679
if it is um already defined in the base

439
00:25:06,679 --> 00:25:09,600
class it doesn't need to be overwritten

440
00:25:09,600 --> 00:25:12,480
but but then you can and then when it's

441
00:25:12,480 --> 00:25:14,960
marked as virtual

442
00:25:14,960 --> 00:25:18,440
then dynamically the program will

443
00:25:18,440 --> 00:25:22,600
determine uh the right function to

444
00:25:22,600 --> 00:25:26,000
call uh okay so if the virtual methods

445
00:25:26,000 --> 00:25:27,320
are not

446
00:25:27,320 --> 00:25:30,320
implemented

447
00:25:30,880 --> 00:25:35,080
um in the class then that makes it an

448
00:25:35,080 --> 00:25:38,360
abstract base class and no objects of

449
00:25:38,360 --> 00:25:39,919
that type can be

450
00:25:39,919 --> 00:25:42,720
declared and we'll also see an example

451
00:25:42,720 --> 00:25:46,039
of that uh

452
00:25:47,000 --> 00:25:51,000
soon yeah that is also an option uh so

453
00:25:51,000 --> 00:25:53,520
so

454
00:25:53,520 --> 00:25:57,480
Constructors uh so would anyone be able

455
00:25:57,480 --> 00:25:59,000
to

456
00:25:59,000 --> 00:26:01,120
tells can

457
00:26:01,120 --> 00:26:06,640
Constructors be virtual should they be

458
00:26:06,640 --> 00:26:09,880
virtual any

459
00:26:14,440 --> 00:26:17,440
ideas you can also Post in chat if

460
00:26:17,440 --> 00:26:20,799
you're on

461
00:26:21,679 --> 00:26:24,480
Zoom I'll let you think about this

462
00:26:24,480 --> 00:26:27,240
for a little

463
00:26:27,240 --> 00:26:30,240
while

464
00:26:52,480 --> 00:26:55,960
okay well the answer is that they cannot

465
00:26:55,960 --> 00:26:59,200
be virtual and and that isn't really

466
00:26:59,200 --> 00:27:01,159
like if if you think about it's not

467
00:27:01,159 --> 00:27:03,320
really

468
00:27:03,320 --> 00:27:05,320
something you would

469
00:27:05,320 --> 00:27:09,000
want because each of the each of the

470
00:27:09,000 --> 00:27:13,120
classes The Base Class the derived

471
00:27:13,120 --> 00:27:16,679
classes uh they they kind of need to

472
00:27:16,679 --> 00:27:20,840
know how to construct themselves and

473
00:27:20,840 --> 00:27:24,399
they can always utilize the uh

474
00:27:24,399 --> 00:27:30,000
Constructors from the base class

475
00:27:30,000 --> 00:27:31,919
so that's kind of how it goes but what

476
00:27:31,919 --> 00:27:33,600
about the structors

477
00:27:33,600 --> 00:27:38,678
then can they be virtual should they be

478
00:27:50,000 --> 00:27:52,159
virtual okay any anyone want to give me

479
00:27:52,159 --> 00:27:54,840
like yes

480
00:27:57,120 --> 00:28:00,120
no

481
00:28:02,559 --> 00:28:05,200
okay uh well the answer is that

482
00:28:05,200 --> 00:28:07,600
they can be virtual and they should be

483
00:28:07,600 --> 00:28:12,159
virtual and I'll explain uh what the

484
00:28:12,159 --> 00:28:14,559
idea there is

485
00:28:14,559 --> 00:28:18,120
so so the idea is

486
00:28:18,120 --> 00:28:20,880
that

487
00:28:20,880 --> 00:28:24,600
uh like we saw

488
00:28:24,600 --> 00:28:27,120
here uh

489
00:28:27,120 --> 00:28:29,919
before like in this

490
00:28:29,919 --> 00:28:33,360
case uh so we have The Spar pointer we

491
00:28:33,360 --> 00:28:36,440
make it point to a

492
00:28:36,440 --> 00:28:39,720
ball uh so so what if

493
00:28:39,720 --> 00:28:44,440
now uh allall had some kind of property

494
00:28:44,440 --> 00:28:47,360
that that the memory needed cleaning

495
00:28:47,360 --> 00:28:50,640
something that was in the Heap and and

496
00:28:50,640 --> 00:28:52,600
we

497
00:28:52,600 --> 00:28:56,880
call uh Delete

498
00:28:56,880 --> 00:29:01,799
s and then it finds the destructor for

499
00:29:01,799 --> 00:29:04,120
the spear class but then the destructor

500
00:29:04,120 --> 00:29:06,159
for the spear class is completely un

501
00:29:06,159 --> 00:29:10,039
unaware the properties of the ball

502
00:29:10,039 --> 00:29:12,360
class so it doesn't know that there's

503
00:29:12,360 --> 00:29:14,600
something there that needs to be cleaned

504
00:29:14,600 --> 00:29:15,679
up from the

505
00:29:15,679 --> 00:29:17,760
memory and then we end up having a

506
00:29:17,760 --> 00:29:20,000
memory leak but

507
00:29:20,000 --> 00:29:24,039
then when the destructor is

508
00:29:24,039 --> 00:29:27,039
virtual uh

509
00:29:27,039 --> 00:29:29,919
then also in this case it will notice

510
00:29:29,919 --> 00:29:32,080
that okay this is actually a ball so

511
00:29:32,080 --> 00:29:34,600
we'll call the destructor of the ball

512
00:29:34,600 --> 00:29:36,360
and and be able to clean up all the

513
00:29:36,360 --> 00:29:39,918
memory related to the

514
00:29:41,360 --> 00:29:46,120
ball so it's a little bit uh kind of

515
00:29:46,120 --> 00:29:50,600
maybe tricky to wrap your head around it

516
00:29:50,600 --> 00:29:54,039
but Constructors can't be virtual while

517
00:29:54,039 --> 00:29:57,360
destructors can and should be virtual

518
00:29:57,360 --> 00:30:00,120
but it's important important to remember

519
00:30:00,120 --> 00:30:02,959
that that's the way it

520
00:30:03,080 --> 00:30:08,000
works uh okay and then virtual method

521
00:30:08,000 --> 00:30:12,519
return type cannot be overwritten so if

522
00:30:12,519 --> 00:30:14,600
you

523
00:30:14,600 --> 00:30:18,039
have uh for

524
00:30:18,600 --> 00:30:22,440
example the get volume function then you

525
00:30:22,440 --> 00:30:25,600
you can't have the the ball class say

526
00:30:25,600 --> 00:30:27,840
that okay what the get volume I'm going

527
00:30:27,840 --> 00:30:30,279
to change it to PR return it as a string

528
00:30:30,279 --> 00:30:33,240
instead yeah you can't do

529
00:30:33,240 --> 00:30:36,320
that it needs to be the same type all

530
00:30:36,320 --> 00:30:38,000
the

531
00:30:38,000 --> 00:30:40,840
way

532
00:30:40,840 --> 00:30:46,399
um okay I I'll show I'll show some

533
00:30:46,399 --> 00:30:48,919
uh

534
00:30:48,919 --> 00:30:51,919
example examples here before

535
00:30:51,919 --> 00:30:56,480
we move on

536
00:30:56,480 --> 00:31:00,880
uh okay so here here we should

537
00:31:02,240 --> 00:31:04,720
have yeah yeah I specifically made this

538
00:31:04,720 --> 00:31:08,720
so that uh there's some

539
00:31:08,720 --> 00:31:11,240
um there's some memory that need needs

540
00:31:11,240 --> 00:31:14,760
to be cleaned up here and let's do

541
00:31:14,760 --> 00:31:17,519
something like

542
00:31:17,519 --> 00:31:19,039
um

543
00:31:19,039 --> 00:31:21,960
well let's just make a new one so let's

544
00:31:21,960 --> 00:31:24,639
do like

545
00:31:26,919 --> 00:31:28,559
um

546
00:31:28,559 --> 00:31:30,639
so we have a sphere

547
00:31:30,639 --> 00:31:36,519
pointer and then we can do this this is

548
00:31:37,480 --> 00:31:41,080
fine and this should

549
00:31:41,080 --> 00:31:44,600
uh yeah I have it set to uh set the name

550
00:31:44,600 --> 00:31:48,159
to default ball so but that should be

551
00:31:48,159 --> 00:31:49,760
fine in

552
00:31:49,760 --> 00:31:52,399
itself and

553
00:31:52,399 --> 00:31:54,260
then let's say we

554
00:31:54,260 --> 00:31:56,840
[Music]

555
00:31:56,840 --> 00:31:59,840
do

556
00:32:01,200 --> 00:32:04,360
let be

557
00:32:09,360 --> 00:32:12,440
display and then then you

558
00:32:12,440 --> 00:32:17,480
should uh Delete SP before it goes out

559
00:32:17,480 --> 00:32:18,519
of

560
00:32:18,519 --> 00:32:23,120
scope so we'll see what this looks like

561
00:32:26,840 --> 00:32:29,840
here

562
00:32:31,240 --> 00:32:33,639
okay so so we're seeing that the program

563
00:32:33,639 --> 00:32:36,519
works just fine and we'll see that okay

564
00:32:36,519 --> 00:32:38,519
it's constructing the

565
00:32:38,519 --> 00:32:40,919
sphere it's also just got kind of go

566
00:32:40,919 --> 00:32:44,039
over this uh entire uh process while

567
00:32:44,039 --> 00:32:47,600
we're at it so so first uh yeah we make

568
00:32:47,600 --> 00:32:50,440
a sphere uh it's getting constructed

569
00:32:50,440 --> 00:32:54,480
then we uh initialize this ball and then

570
00:32:54,480 --> 00:32:56,840
first we see the sphere constructed so

571
00:32:56,840 --> 00:32:59,039
it it kind of constru structs the The

572
00:32:59,039 --> 00:33:04,600
Base Class part of it then it

573
00:33:05,480 --> 00:33:09,240
uh in in in this case in this case the

574
00:33:09,240 --> 00:33:12,320
way it works is that we're creating ball

575
00:33:12,320 --> 00:33:15,918
out of

576
00:33:16,320 --> 00:33:19,799
steer uh and

577
00:33:21,799 --> 00:33:26,039
then okay this isn't actually really the

578
00:33:26,039 --> 00:33:29,760
uh this isn't really the best way to do

579
00:33:29,760 --> 00:33:32,519
this because instead we can use this

580
00:33:32,519 --> 00:33:35,960
uh Constructor

581
00:33:35,960 --> 00:33:37,919
delegation yeah I didn't really actually

582
00:33:37,919 --> 00:33:40,279
explain this I probably should have had

583
00:33:40,279 --> 00:33:43,279
uh separate slides for this but yeah

584
00:33:43,279 --> 00:33:46,039
basically when we do

585
00:33:46,039 --> 00:33:51,799
this uh we're we're not like kind

586
00:33:52,799 --> 00:33:55,880
of creating a new sphere here or

587
00:33:55,880 --> 00:33:57,840
anything like that but what we're doing

588
00:33:57,840 --> 00:34:01,440
doing is that we're just calling the uh

589
00:34:01,440 --> 00:34:03,000
sphere

590
00:34:03,000 --> 00:34:05,480
Constructor inside the ball and so so

591
00:34:05,480 --> 00:34:08,679
it's going to construct the sphere parts

592
00:34:08,679 --> 00:34:12,280
of this class based on uh this sphere

593
00:34:12,280 --> 00:34:14,960
that that is given in this

594
00:34:14,960 --> 00:34:16,839
case

595
00:34:16,839 --> 00:34:19,560
and now actually I do have some slides

596
00:34:19,560 --> 00:34:21,199
related to this but but anyway that's

597
00:34:21,199 --> 00:34:21,918
the

598
00:34:21,918 --> 00:34:24,918
idea

599
00:34:26,280 --> 00:34:30,239
um again then in this case

600
00:34:30,239 --> 00:34:32,359
actually actually we're run into a

601
00:34:32,359 --> 00:34:35,800
problem here so so we can't actually do

602
00:34:35,800 --> 00:34:38,639
both of these things so we need to

603
00:34:38,639 --> 00:34:41,918
initialize the name some other

604
00:34:41,918 --> 00:34:45,639
way uh we we

605
00:34:45,639 --> 00:34:50,079
could we could initialize it here

606
00:34:50,079 --> 00:34:53,239
U but then we might also end up having

607
00:34:53,239 --> 00:34:55,800
multiple Constructors that want to use

608
00:34:55,800 --> 00:34:59,119
the same uh default name like we have

609
00:34:59,119 --> 00:35:01,240
here for

610
00:35:01,240 --> 00:35:03,320
example

611
00:35:03,320 --> 00:35:07,880
um so let me just change this to

612
00:35:08,320 --> 00:35:10,560
also No actually that's not necessary

613
00:35:10,560 --> 00:35:12,640
because that happens automatically but

614
00:35:12,640 --> 00:35:18,040
we'll also get to that in a bit uh

615
00:35:19,839 --> 00:35:24,880
okay so what we can do is we can

616
00:35:26,040 --> 00:35:28,359
actually okay in this case it's a little

617
00:35:28,359 --> 00:35:30,320
bit confusing because it's a pointer but

618
00:35:30,320 --> 00:35:31,720
okay if it wasn't a pointer then we

619
00:35:31,720 --> 00:35:33,920
could Define

620
00:35:33,920 --> 00:35:36,000
the

621
00:35:36,000 --> 00:35:38,920
um default values like this so then you

622
00:35:38,920 --> 00:35:45,160
don't get prund redundency in the um

623
00:35:47,960 --> 00:35:49,800
instructors okay well now now I'm kind

624
00:35:49,800 --> 00:35:52,000
of getting all all over the place

625
00:35:52,000 --> 00:35:54,160
but okay okay let's see what the

626
00:35:54,160 --> 00:35:59,640
situation is um right now

627
00:36:07,000 --> 00:36:10,920
um we're actually getting into

628
00:36:12,400 --> 00:36:15,040
some problem okay I I didn't like too

629
00:36:15,040 --> 00:36:17,119
much editing and now now I'm

630
00:36:17,119 --> 00:36:24,000
confused but uh okay let's just say

631
00:36:26,560 --> 00:36:29,240
that I already talked about what the

632
00:36:29,240 --> 00:36:31,720
problem is with the um why why you need

633
00:36:31,720 --> 00:36:34,040
virtual destructors and then I realized

634
00:36:34,040 --> 00:36:36,040
that there's some other things to

635
00:36:36,040 --> 00:36:38,880
explain in the slides that I I should

636
00:36:38,880 --> 00:36:40,920
have explained before getting into some

637
00:36:40,920 --> 00:36:42,400
of the

638
00:36:42,400 --> 00:36:44,200
code

639
00:36:44,200 --> 00:36:47,599
uh okay so this is something that I

640
00:36:47,599 --> 00:36:48,480
showed

641
00:36:48,480 --> 00:36:51,599
before so if we have a ball

642
00:36:51,599 --> 00:36:55,520
Constructor then we can do this where in

643
00:36:55,520 --> 00:36:56,520
the

644
00:36:56,520 --> 00:36:59,240
initialization

645
00:36:59,240 --> 00:37:01,640
uh initializer line while

646
00:37:01,640 --> 00:37:04,599
we call the spear

647
00:37:04,599 --> 00:37:06,440
Constructor that's something you can do

648
00:37:06,440 --> 00:37:09,160
to initialize the properties belong to

649
00:37:09,160 --> 00:37:10,720
the sphere but you don't actually have

650
00:37:10,720 --> 00:37:12,560
to do that because that happens by

651
00:37:12,560 --> 00:37:15,560
default

652
00:37:15,560 --> 00:37:17,200
all

653
00:37:17,200 --> 00:37:19,800
uh so

654
00:37:19,800 --> 00:37:22,520
then the default B Constructor could

655
00:37:22,520 --> 00:37:26,480
look something like this where uh well

656
00:37:26,480 --> 00:37:27,760
you can actually just get rid of of the

657
00:37:27,760 --> 00:37:30,200
sphere part and then just give it some

658
00:37:30,200 --> 00:37:31,599
question mark As

659
00:37:31,599 --> 00:37:34,599
name

660
00:37:37,440 --> 00:37:40,040
um and then also in this case we're

661
00:37:40,040 --> 00:37:42,400
we're not calling the uh default

662
00:37:42,400 --> 00:37:45,280
Constructor but instead we're calling

663
00:37:45,280 --> 00:37:48,440
the Constructor that takes the radius as

664
00:37:48,440 --> 00:37:50,040
an

665
00:37:50,040 --> 00:37:53,040
argument so so you can call any Base

666
00:37:53,040 --> 00:37:56,160
Class Constructor uh from a derived

667
00:37:56,160 --> 00:37:58,920
class Constructor like this and it's

668
00:37:58,920 --> 00:38:01,400
fine but but you you need to do this

669
00:38:01,400 --> 00:38:04,040
like in the

670
00:38:04,040 --> 00:38:08,079
um in in the initializer line because

671
00:38:08,079 --> 00:38:10,560
like if you want to do it in the in the

672
00:38:10,560 --> 00:38:13,440
like actual

673
00:38:13,440 --> 00:38:18,040
uh code part of the Constructor

674
00:38:18,040 --> 00:38:20,960
then

675
00:38:20,960 --> 00:38:23,720
uh that then what what you would

676
00:38:23,720 --> 00:38:28,400
basically have to do is like create a

677
00:38:28,400 --> 00:38:30,359
completely new sphere and then copy the

678
00:38:30,359 --> 00:38:32,480
properties over or something like that

679
00:38:32,480 --> 00:38:35,240
and that's really inefficient so

680
00:38:35,240 --> 00:38:38,839
Constructors uh as you know you can't

681
00:38:38,839 --> 00:38:41,400
just like explicitly call them it's they

682
00:38:41,400 --> 00:38:44,200
only get called during initialization so

683
00:38:44,200 --> 00:38:47,560
that's why they have to be specifically

684
00:38:47,560 --> 00:38:51,880
here and not

685
00:38:52,920 --> 00:38:55,920
here

686
00:38:56,440 --> 00:38:58,960
um

687
00:38:58,960 --> 00:39:03,000
okay yeah and I talked

688
00:39:03,319 --> 00:39:07,000
about wordful destructors I feel like

689
00:39:07,000 --> 00:39:08,400
some of my slides are a little bit out

690
00:39:08,400 --> 00:39:14,760
of order but I guess we get some prap

691
00:39:19,640 --> 00:39:22,480
so yeah we already discussed about that

692
00:39:22,480 --> 00:39:26,359
so it's fine let's move

693
00:39:26,359 --> 00:39:29,240
on uh

694
00:39:29,240 --> 00:39:33,920
so okay okay maybe maybe I can make this

695
00:39:33,920 --> 00:39:36,720
example or now okay I actually already

696
00:39:36,720 --> 00:39:38,839
defined it as as

697
00:39:38,839 --> 00:39:41,920
virtual uh okay so I should have

698
00:39:41,920 --> 00:39:46,599
everything set up here okay okay this is

699
00:39:46,599 --> 00:39:48,839
going to be fine

700
00:39:48,839 --> 00:39:52,160
so have a sphere

701
00:39:52,160 --> 00:39:56,319
pointer we'll make a new

702
00:39:56,319 --> 00:40:00,040
ball and then

703
00:40:00,160 --> 00:40:03,560
we delete

704
00:40:14,400 --> 00:40:19,599
it oh oh wait it's lower

705
00:40:19,720 --> 00:40:23,839
case yeah that's fine everything

706
00:40:26,319 --> 00:40:28,200
works

707
00:40:28,200 --> 00:40:31,440
use spell grind and you see no no leaks

708
00:40:31,440 --> 00:40:36,160
are possible so it's fine and

709
00:40:39,359 --> 00:40:43,040
then and you can also see

710
00:40:43,040 --> 00:40:47,160
uh here is uh this means that it's it

711
00:40:47,160 --> 00:40:48,359
destroyed

712
00:40:48,359 --> 00:40:52,480
the ball based on its

713
00:40:52,480 --> 00:40:55,480
own

714
00:40:56,240 --> 00:40:59,240
distructor

715
00:41:04,359 --> 00:41:05,599
okay and now when we don't have the

716
00:41:05,599 --> 00:41:07,520
virtual keyword then we notice that okay

717
00:41:07,520 --> 00:41:11,240
we've run into this

718
00:41:13,520 --> 00:41:17,800
problem okay that's the

719
00:41:17,800 --> 00:41:21,880
idea uh all right then let me explain

720
00:41:21,880 --> 00:41:24,400
abstract base classes I mentioned that

721
00:41:24,400 --> 00:41:27,560
before so if you have something like

722
00:41:27,560 --> 00:41:31,400
this where uh you have a virtual

723
00:41:31,400 --> 00:41:34,640
function and

724
00:41:35,079 --> 00:41:39,240
then that then you write that it equals

725
00:41:39,240 --> 00:41:41,520
zero this probably looks a little bit

726
00:41:41,520 --> 00:41:44,440
weird how why is this function equaling

727
00:41:44,440 --> 00:41:46,920
zero well that's just kind of

728
00:41:46,920 --> 00:41:49,319
syntax uh

729
00:41:49,319 --> 00:41:53,880
to specify that that we're not defining

730
00:41:53,880 --> 00:41:56,240
this function

731
00:41:56,240 --> 00:41:59,920
here so then you'll see this class in

732
00:41:59,920 --> 00:42:05,560
some of the assignments this drawable

733
00:42:05,880 --> 00:42:09,800
class uh and it's pretty much like this

734
00:42:09,800 --> 00:42:12,200
the the destructor doesn't do anything

735
00:42:12,200 --> 00:42:17,000
the uh draw function it doesn't do

736
00:42:17,560 --> 00:42:19,960
anything that this class doesn't really

737
00:42:19,960 --> 00:42:22,160
have anything in

738
00:42:22,160 --> 00:42:25,599
it what is what is even the point and

739
00:42:25,599 --> 00:42:28,119
well the point is that the since it's

740
00:42:28,119 --> 00:42:29,880
abstracted it doesn't have the draw

741
00:42:29,880 --> 00:42:31,280
function

742
00:42:31,280 --> 00:42:33,920
defined which kind

743
00:42:33,920 --> 00:42:37,960
of uh directly means that we

744
00:42:37,960 --> 00:42:44,160
can't uh create any objects like this so

745
00:42:44,160 --> 00:42:46,319
let's

746
00:42:46,319 --> 00:42:50,880
say say if get volume

747
00:42:51,880 --> 00:42:56,119
here uh make it

748
00:42:56,119 --> 00:42:58,400
zero

749
00:42:58,400 --> 00:43:00,720
just uh comment that

750
00:43:00,720 --> 00:43:04,359
out and then we try

751
00:43:09,280 --> 00:43:12,520
to uh try to compile here then then we

752
00:43:12,520 --> 00:43:13,640
get an

753
00:43:13,640 --> 00:43:15,680
error

754
00:43:15,680 --> 00:43:18,359
um and it's just it's just getting

755
00:43:18,359 --> 00:43:20,960
confused like like we can't do

756
00:43:20,960 --> 00:43:23,960
this

757
00:43:26,119 --> 00:43:29,119
um

758
00:43:29,640 --> 00:43:32,920
but then uh what what the point of this

759
00:43:32,920 --> 00:43:37,400
is is um well actually actually I'll

760
00:43:37,400 --> 00:43:39,319
show here this is the best way to kind

761
00:43:39,319 --> 00:43:42,000
of kind of show what the point is is

762
00:43:42,000 --> 00:43:45,079
that if we have like I mentioned before

763
00:43:45,079 --> 00:43:47,480
this kind of array of these different

764
00:43:47,480 --> 00:43:50,760
derived classes then we could call the

765
00:43:50,760 --> 00:43:53,400
same function for all of these and then

766
00:43:53,400 --> 00:43:55,760
it's finding the correct function to

767
00:43:55,760 --> 00:44:01,480
call in each these cases so the idea is

768
00:44:01,480 --> 00:44:03,520
that

769
00:44:03,520 --> 00:44:08,240
uh then we Define that all classes that

770
00:44:08,240 --> 00:44:09,400
derive from

771
00:44:09,400 --> 00:44:12,839
drawable should have this draw

772
00:44:12,839 --> 00:44:16,720
function and and the fact that we Define

773
00:44:16,720 --> 00:44:20,400
it this way means that we we can we can

774
00:44:20,400 --> 00:44:22,839
call the same function on all of these

775
00:44:22,839 --> 00:44:25,359
objects so we can create these Loops

776
00:44:25,359 --> 00:44:26,599
that just go through all of them and

777
00:44:26,599 --> 00:44:29,599
call the function uh and we can get this

778
00:44:29,599 --> 00:44:32,240
like really

779
00:44:32,240 --> 00:44:35,400
clean code and we don't have to WR like

780
00:44:35,400 --> 00:44:37,920
everything in a separate line like okay

781
00:44:37,920 --> 00:44:38,960
what's called

782
00:44:38,960 --> 00:44:42,359
the draw Square function and draw Circle

783
00:44:42,359 --> 00:44:46,640
function and draw triangle function uh

784
00:44:46,640 --> 00:44:49,000
so that's kind of the idea why why you

785
00:44:49,000 --> 00:44:51,319
want to do this so you just you just

786
00:44:51,319 --> 00:44:53,119
Define that the DED

787
00:44:53,119 --> 00:44:56,040
classes should Define

788
00:44:56,040 --> 00:44:58,359
this

789
00:44:58,359 --> 00:45:00,559
and yeah you can just kind of see one

790
00:45:00,559 --> 00:45:05,559
example of the rectangles raw function

791
00:45:05,559 --> 00:45:08,480
there but but we're not going to

792
00:45:08,480 --> 00:45:12,839
get like in depth on how that works

793
00:45:12,839 --> 00:45:16,880
that's relevant uh okay

794
00:45:16,880 --> 00:45:22,079
so then if we try

795
00:45:22,119 --> 00:45:28,119
to uh create a new drawable like that uh

796
00:45:28,119 --> 00:45:30,280
like I showed we get an error you can't

797
00:45:30,280 --> 00:45:33,280
do that uh then we have this rectangle

798
00:45:33,280 --> 00:45:35,000
that deres

799
00:45:35,000 --> 00:45:38,920
from drawable and defines its own draw

800
00:45:38,920 --> 00:45:42,040
function like there then everything's

801
00:45:42,040 --> 00:45:44,760
fine like no problem we we can create

802
00:45:44,760 --> 00:45:47,240
that rectangle and call it STW

803
00:45:47,240 --> 00:45:50,280
function uh but

804
00:45:50,280 --> 00:45:54,640
then what we can do is is we can create

805
00:45:54,640 --> 00:45:57,599
these drawable pointer

806
00:45:57,599 --> 00:46:00,319
and then we can put any kind of drawable

807
00:46:00,319 --> 00:46:03,000
on it and then by using the virtual

808
00:46:03,000 --> 00:46:05,559
functions it'll always make sure to use

809
00:46:05,559 --> 00:46:08,119
the correct

810
00:46:09,960 --> 00:46:12,319
function

811
00:46:12,319 --> 00:46:15,319
uh

812
00:46:15,920 --> 00:46:19,760
okay so so kind of as as I recap

813
00:46:19,760 --> 00:46:23,160
the what inheritance provides is this

814
00:46:23,160 --> 00:46:25,920
Dynamic polymorphism

815
00:46:25,920 --> 00:46:29,559
so the type dependent function can be

816
00:46:29,559 --> 00:46:32,800
selected at at frun time or or it might

817
00:46:32,800 --> 00:46:36,559
be optimized by the compiler but uh yeah

818
00:46:36,559 --> 00:46:38,880
the point is

819
00:46:38,880 --> 00:46:41,839
that despite like kind of calling the

820
00:46:41,839 --> 00:46:44,520
the the same function it can determine

821
00:46:44,520 --> 00:46:47,160
that okay actually actually call this

822
00:46:47,160 --> 00:46:51,079
function instead and later we're also

823
00:46:51,079 --> 00:46:55,000
going to see something about

824
00:46:55,000 --> 00:46:58,480
templates which is the case of

825
00:46:58,480 --> 00:47:00,440
polymorphism

826
00:47:00,440 --> 00:47:02,920
um where type dependent functions are

827
00:47:02,920 --> 00:47:05,240
chosen at compile time so it it's a

828
00:47:05,240 --> 00:47:06,760
similar

829
00:47:06,760 --> 00:47:11,880
concept but uh yeah we'll have more more

830
00:47:11,880 --> 00:47:12,920
on that

831
00:47:12,920 --> 00:47:16,720
later uh

832
00:47:20,240 --> 00:47:24,040
okay okay any any questions about

833
00:47:24,040 --> 00:47:27,440
inheritance at this point I feel like

834
00:47:27,440 --> 00:47:31,040
maybe at some point I I kind of

835
00:47:31,040 --> 00:47:35,720
uh lost the flow of the whole thing a

836
00:47:35,720 --> 00:47:37,240
little bit so hopefully it wasn't too

837
00:47:37,240 --> 00:47:41,839
confusing but uh let me know if like

838
00:47:41,839 --> 00:47:45,280
something is really unclear and I'll go

839
00:47:45,280 --> 00:47:47,720
back and

840
00:47:55,839 --> 00:47:58,480
explain

841
00:47:58,480 --> 00:47:59,440
but that

842
00:47:59,440 --> 00:48:02,640
should cover

843
00:48:02,640 --> 00:48:06,720
the uh inheritance part I I do also have

844
00:48:06,720 --> 00:48:09,118
the

845
00:48:09,480 --> 00:48:13,640
uh no hold on so the deadline for lab

846
00:48:13,640 --> 00:48:16,119
memory is is today so I I I shouldn't

847
00:48:16,119 --> 00:48:20,200
actually show the solutions to that now

848
00:48:20,200 --> 00:48:23,079
yeah yeah El I actually have a couple of

849
00:48:23,079 --> 00:48:25,359
questions about the

850
00:48:25,359 --> 00:48:29,760
um maybe we can look at your code and

851
00:48:29,760 --> 00:48:33,280
see like um I think it's interesting to

852
00:48:33,280 --> 00:48:36,359
discuss how thatly the constructors and

853
00:48:36,359 --> 00:48:39,760
destructors are called for uh base

854
00:48:39,760 --> 00:48:42,480
classes and inherited classes like when

855
00:48:42,480 --> 00:48:47,119
you create a ball there um maybe we can

856
00:48:47,119 --> 00:48:49,880
go over a little in more detail why than

857
00:48:49,880 --> 00:48:53,000
the ball part and the sphere part are

858
00:48:53,000 --> 00:48:56,040
created and when and when you delete

859
00:48:56,040 --> 00:48:58,799
when you delete a ball or a sphere how

860
00:48:58,799 --> 00:49:01,839
does it know to call

861
00:49:01,839 --> 00:49:06,520
um both parts to be deleted right um so

862
00:49:06,520 --> 00:49:08,319
what's the mechanism for that if you if

863
00:49:08,319 --> 00:49:10,119
you can go like you have a nice example

864
00:49:10,119 --> 00:49:11,880
in your functions but we can go like

865
00:49:11,880 --> 00:49:13,680
through the construction of balls

866
00:49:13,680 --> 00:49:15,599
inherited classes and destruction of

867
00:49:15,599 --> 00:49:18,200
inherited

868
00:49:18,799 --> 00:49:21,000
classes but even when there is no

869
00:49:21,000 --> 00:49:25,079
virtual cold right um how does the

870
00:49:25,079 --> 00:49:27,240
destructor know to delete this Fe part

871
00:49:27,240 --> 00:49:29,439
for

872
00:49:30,520 --> 00:49:36,079
example uh okay so so if we go back to

873
00:49:36,079 --> 00:49:37,640
this like kind

874
00:49:37,640 --> 00:49:43,000
of uh basic example so so in this case

875
00:49:43,000 --> 00:49:46,720
um we don't have the

876
00:49:46,720 --> 00:49:50,280
destructors uh defined but yeah in this

877
00:49:50,280 --> 00:49:52,640
case you can see like when we create

878
00:49:52,640 --> 00:49:54,720
first a sphere and then a ball then we

879
00:49:54,720 --> 00:49:56,680
see that sphere constructed sphere

880
00:49:56,680 --> 00:50:00,799
constructed then pom pom uh constructed

881
00:50:00,799 --> 00:50:04,960
so it's like that and

882
00:50:04,960 --> 00:50:06,880
now uh

883
00:50:06,880 --> 00:50:11,480
let's go to

884
00:50:12,559 --> 00:50:15,839
over here let's get rid of the virtual

885
00:50:15,839 --> 00:50:19,720
and then let's see

886
00:50:22,400 --> 00:50:25,640
um okay let's let's put this

887
00:50:25,640 --> 00:50:28,640
back

888
00:50:31,040 --> 00:50:33,359
okay yeah yeah here we have uh it just

889
00:50:33,359 --> 00:50:34,680
says Spar

890
00:50:34,680 --> 00:50:36,839
destroyed uh let's

891
00:50:36,839 --> 00:50:38,520
say

892
00:50:38,520 --> 00:50:41,839
yeah let's also do the same thing

893
00:50:41,839 --> 00:50:44,440
here be like

894
00:50:44,440 --> 00:50:48,160
um no actually I think I already defined

895
00:50:48,160 --> 00:50:51,640
this like down here right yeah okay yeah

896
00:50:51,640 --> 00:50:53,880
it says uh name destroyed and then

897
00:50:53,880 --> 00:50:56,319
deletes the name okay okay let's also

898
00:50:56,319 --> 00:50:58,640
try

899
00:50:59,799 --> 00:51:02,400
let's also try yeah that's adding some

900
00:51:02,400 --> 00:51:06,440
kind of new thing here yeah uh let's

901
00:51:06,440 --> 00:51:09,040
give this some kind of string too in the

902
00:51:09,040 --> 00:51:11,680
in the Heap and then let's see how it

903
00:51:11,680 --> 00:51:14,839
how it turns out uh so what could this

904
00:51:14,839 --> 00:51:16,559
sphere have it's

905
00:51:16,559 --> 00:51:19,559
like

906
00:51:20,400 --> 00:51:23,319
uh let's

907
00:51:23,319 --> 00:51:27,119
say not a name material okay material

908
00:51:27,119 --> 00:51:29,359
that's good yeah surface yeah material

909
00:51:29,359 --> 00:51:32,839
sphere has some kind of material to it

910
00:51:32,839 --> 00:51:34,380
so let's

911
00:51:34,380 --> 00:51:37,459
[Music]

912
00:51:39,119 --> 00:51:43,720
um let's uh for for example

913
00:51:44,680 --> 00:51:47,960
here this SP let's put that back

914
00:51:47,960 --> 00:51:50,960
there

915
00:51:55,359 --> 00:51:58,520
um there

916
00:52:05,200 --> 00:52:07,960
um new

917
00:52:07,960 --> 00:52:11,720
string rubber yeah I think that should

918
00:52:11,720 --> 00:52:15,160
be fine

919
00:52:16,480 --> 00:52:19,680
uh let's

920
00:52:21,359 --> 00:52:24,880
also do

921
00:52:25,520 --> 00:52:28,520
this

922
00:52:35,520 --> 00:52:37,640
well okay it's it's a little bit

923
00:52:37,640 --> 00:52:39,559
redundant but but let's just put the

924
00:52:39,559 --> 00:52:43,359
same line here as

925
00:52:44,520 --> 00:52:47,520
well

926
00:52:52,040 --> 00:52:55,040
okay

927
00:52:55,440 --> 00:52:57,839
then

928
00:52:57,839 --> 00:53:00,920
yeah very

929
00:53:05,960 --> 00:53:10,079
good then we also

930
00:53:11,079 --> 00:53:15,720
have uh okay I'll change the

931
00:53:16,119 --> 00:53:18,680
names this one can be

932
00:53:18,680 --> 00:53:20,319
two

933
00:53:20,319 --> 00:53:24,440
um and then we'll delete both of them

934
00:53:24,440 --> 00:53:28,440
okay what happens now

935
00:53:28,700 --> 00:53:31,759
[Music]

936
00:53:31,839 --> 00:53:37,558
oh this one all right I forgot about

937
00:53:42,960 --> 00:53:46,119
that okay so we

938
00:53:46,119 --> 00:53:50,240
see of expect that sphere constructed

939
00:53:50,240 --> 00:53:51,200
then

940
00:53:51,200 --> 00:53:54,640
spere uh and then default ball so it's

941
00:53:54,640 --> 00:53:57,359
doing it with the default name

942
00:53:57,359 --> 00:53:59,839
and then we have spere destroyed and

943
00:53:59,839 --> 00:54:02,880
spere destroyed so in both of these

944
00:54:02,880 --> 00:54:07,400
cases uh it's destroying the sphere uh

945
00:54:07,400 --> 00:54:08,960
because

946
00:54:08,960 --> 00:54:12,440
they're um sphere pointers and it's not

947
00:54:12,440 --> 00:54:17,440
virtual now now let's um if we have

948
00:54:17,599 --> 00:54:23,559
a just an actual ball pointer poing to a

949
00:54:25,359 --> 00:54:28,359
ball

950
00:54:30,680 --> 00:54:32,160
okay now now we're getting all kinds of

951
00:54:32,160 --> 00:54:34,599
messages this is getting like a little

952
00:54:34,599 --> 00:54:37,079
bit confusing

953
00:54:37,079 --> 00:54:39,079
already let's get rid of the other

954
00:54:39,079 --> 00:54:43,000
things first and

955
00:54:43,480 --> 00:54:46,200
uh and we can more clearly see what

956
00:54:46,200 --> 00:54:48,960
happens here spear constructed default

957
00:54:48,960 --> 00:54:51,960
ball constructed default ball destroyed

958
00:54:51,960 --> 00:54:54,280
spear

959
00:54:54,280 --> 00:54:57,640
destroyed yeah

960
00:54:57,640 --> 00:55:01,200
so so then default ball is the name of

961
00:55:01,200 --> 00:55:03,359
it and this is what it looks like when

962
00:55:03,359 --> 00:55:06,720
it's calling the destructor for uh the

963
00:55:06,720 --> 00:55:08,920
ball

964
00:55:08,920 --> 00:55:10,640
class

965
00:55:10,640 --> 00:55:14,319
uh so then what is doing is it's first

966
00:55:14,319 --> 00:55:17,359
it constructs the base class then it

967
00:55:17,359 --> 00:55:19,920
constructs the derived class then it

968
00:55:19,920 --> 00:55:22,160
destroys the derived class and then

969
00:55:22,160 --> 00:55:25,640
destroys the base class it's kind of in

970
00:55:25,640 --> 00:55:29,078
uh reverse order like

971
00:55:30,119 --> 00:55:33,599
that uh yeah and this is compile time

972
00:55:33,599 --> 00:55:35,839
binding because we didn't declare any

973
00:55:35,839 --> 00:55:38,359
virtual right

974
00:55:38,359 --> 00:55:40,760
functions yeah yeah so so this this of

975
00:55:40,760 --> 00:55:45,240
course Works uh works for the

976
00:55:45,240 --> 00:55:48,839
pole now if we

977
00:55:49,400 --> 00:55:52,240
do if we do

978
00:55:52,240 --> 00:55:55,440
this we have the sphere pointer pointing

979
00:55:55,440 --> 00:55:58,240
to a ball

980
00:55:58,240 --> 00:56:01,000
then we delete

981
00:56:01,799 --> 00:56:05,480
that so it's constructing it the same

982
00:56:05,480 --> 00:56:09,599
way but now it's only destroying the

983
00:56:09,599 --> 00:56:14,119
sphere okay now we know how to fix

984
00:56:14,319 --> 00:56:17,880
that let's make it

985
00:56:17,880 --> 00:56:20,880
virtual

986
00:56:21,640 --> 00:56:25,319
um I guess I should also make this like

987
00:56:25,319 --> 00:56:28,240
um

988
00:56:28,400 --> 00:56:30,839
delete

989
00:56:34,720 --> 00:56:37,760
material okay and now we see that this

990
00:56:37,760 --> 00:56:41,480
also works just fine it calls the

991
00:56:41,480 --> 00:56:45,200
destructor for both the uh Drive class

992
00:56:45,200 --> 00:56:49,599
and and then also the the base class so

993
00:56:49,599 --> 00:56:52,880
uh so it's like even though we're

994
00:56:52,880 --> 00:56:55,160
specifically pointing it to like like

995
00:56:55,160 --> 00:56:57,559
okay call

996
00:56:57,559 --> 00:57:00,000
like like this this is virtual so so you

997
00:57:00,000 --> 00:57:01,599
shouldn't call this you should you

998
00:57:01,599 --> 00:57:04,039
should call this the structor instead

999
00:57:04,039 --> 00:57:07,799
but even then it it also goes through

1000
00:57:07,799 --> 00:57:10,960
the Base Class

1001
00:57:13,559 --> 00:57:16,039
Destructor yeah this is a good example I

1002
00:57:16,039 --> 00:57:20,400
think to show how virtual changes the

1003
00:57:22,160 --> 00:57:28,160
behavior yeah I guess we can see

1004
00:57:28,920 --> 00:57:30,920
see if we have any problems here and we

1005
00:57:30,920 --> 00:57:33,960
don't no leaks are

1006
00:57:33,960 --> 00:57:37,240
possible yeah everything's

1007
00:57:37,240 --> 00:57:40,119
fine so I think another thing to not uh

1008
00:57:40,119 --> 00:57:44,760
to notice or to note for students that

1009
00:57:44,760 --> 00:57:48,200
um they can see how many errors can be

1010
00:57:48,200 --> 00:57:51,319
created compile erors or uh runtime

1011
00:57:51,319 --> 00:57:55,079
Errors By just forgetting the virtual or

1012
00:57:55,079 --> 00:57:58,760
forgetting to set up something to as a

1013
00:57:58,760 --> 00:58:02,240
abstract based class right um so then

1014
00:58:02,240 --> 00:58:04,920
the next Lab on inheritance is exactly

1015
00:58:04,920 --> 00:58:08,480
us planting all of these arrows in the

1016
00:58:08,480 --> 00:58:12,319
lab and they'll have to chase um yeah

1017
00:58:12,319 --> 00:58:15,640
where the the problems were

1018
00:58:16,520 --> 00:58:20,920
planted yeah definitely if if if at this

1019
00:58:20,920 --> 00:58:22,760
this point it feels

1020
00:58:22,760 --> 00:58:24,480
like

1021
00:58:24,480 --> 00:58:26,960
confusing uh then

1022
00:58:26,960 --> 00:58:28,319
when you when you work on lab

1023
00:58:28,319 --> 00:58:31,039
inheritance then you'll get plenty of

1024
00:58:31,039 --> 00:58:33,319
practice on like each of the different

1025
00:58:33,319 --> 00:58:36,000
parts and like kind of see how how all

1026
00:58:36,000 --> 00:58:39,640
of these uh play out and and have to

1027
00:58:39,640 --> 00:58:42,920
like find all these bugs so hopefully

1028
00:58:42,920 --> 00:58:45,000
hopefully based on this lecture you'll

1029
00:58:45,000 --> 00:58:49,200
already have an idea like

1030
00:58:49,200 --> 00:58:52,240
uh like like okay if this derived class

1031
00:58:52,240 --> 00:58:55,400
isn't working as intended then maybe I

1032
00:58:55,400 --> 00:58:56,880
should see

1033
00:58:56,880 --> 00:58:59,839
if if the base class is using the

1034
00:58:59,839 --> 00:59:01,960
virtual keyword for

1035
00:59:01,960 --> 00:59:05,960
example uh making sure that all the

1036
00:59:05,960 --> 00:59:08,839
constructors and destructors in both the

1037
00:59:08,839 --> 00:59:12,119
like base and derived classes are uh as

1038
00:59:12,119 --> 00:59:14,000
they should

1039
00:59:14,000 --> 00:59:17,559
be that they aren't licking memory in

1040
00:59:17,559 --> 00:59:18,920
any of

1041
00:59:18,920 --> 00:59:23,799
those so yeah inheritance does make

1042
00:59:23,799 --> 00:59:26,480
uh code like a little bit complicated in

1043
00:59:26,480 --> 00:59:28,720
that way that if you have a problem with

1044
00:59:28,720 --> 00:59:32,240
some like object in your code then maybe

1045
00:59:32,240 --> 00:59:33,920
the problem is actually in the base

1046
00:59:33,920 --> 00:59:38,319
class and not in the in the derived

1047
00:59:38,319 --> 00:59:41,400
class but you can kind of trace it back

1048
00:59:41,400 --> 00:59:44,440
like like you can you can see like okay

1049
00:59:44,440 --> 00:59:47,200
the base class is like this uh you can

1050
00:59:47,200 --> 00:59:49,880
check like okay uses virtual so so then

1051
00:59:49,880 --> 00:59:50,680
we

1052
00:59:50,680 --> 00:59:53,480
go down to the next one and then we see

1053
00:59:53,480 --> 00:59:56,640
like okay looks like everything's fine

1054
00:59:56,640 --> 00:59:59,119
here and then you could go down even

1055
00:59:59,119 --> 00:59:59,880
even

1056
00:59:59,880 --> 01:00:03,000
more uh in this case we only show showed

1057
01:00:03,000 --> 01:00:04,640
like having a base class and then one

1058
01:00:04,640 --> 01:00:07,359
derived class but then the derived class

1059
01:00:07,359 --> 01:00:09,160
could also have

1060
01:00:09,160 --> 01:00:12,640
more derived classes from

1061
01:00:12,640 --> 01:00:15,799
that you can kind of Nest it as much as

1062
01:00:15,799 --> 01:00:20,079
you want uh so yeah you can just kind of

1063
01:00:20,079 --> 01:00:22,559
Trace

1064
01:00:24,960 --> 01:00:27,960
that

1065
01:00:28,680 --> 01:00:31,680
okay remember there's also the QA is

1066
01:00:31,680 --> 01:00:34,599
open on slid so you can also put

1067
01:00:34,599 --> 01:00:36,160
questions here we

1068
01:00:36,160 --> 01:00:40,720
have we have some time here since uh I

1069
01:00:40,720 --> 01:00:43,200
can't really reveal

1070
01:00:43,200 --> 01:00:46,760
the uh lab memory Solutions yet oh right

1071
01:00:46,760 --> 01:00:49,680
so you were going to um cover that so I

1072
01:00:49,680 --> 01:00:52,160
have um if if there are no questions we

1073
01:00:52,160 --> 01:00:56,039
can just uh finish early uh but we do

1074
01:00:56,039 --> 01:01:01,119
want to cover the solutions for lab uh

1075
01:01:01,119 --> 01:01:05,079
GDB right is that the previous lab uh no

1076
01:01:05,079 --> 01:01:08,280
no slab memory oh lab memory yeah lab

1077
01:01:08,280 --> 01:01:10,480
memory yeah so we want to probably we

1078
01:01:10,480 --> 01:01:12,839
can do it on Thursday because templates

1079
01:01:12,839 --> 01:01:15,119
are not going to be full one and a half

1080
01:01:15,119 --> 01:01:18,200
hours as well so we can do that if

1081
01:01:18,200 --> 01:01:20,759
you're already

1082
01:01:21,319 --> 01:01:24,000
prepared we can let everybody gobe I'll

1083
01:01:24,000 --> 01:01:26,920
make a separate recording uh

1084
01:01:26,920 --> 01:01:29,119
maybe maybe even include lab debug

1085
01:01:29,119 --> 01:01:31,440
because we lost that recording but that

1086
01:01:31,440 --> 01:01:35,160
sounds good yeah yep

1087
01:01:35,160 --> 01:01:36,839
yeah

1088
01:01:36,839 --> 01:01:41,160
uh okay well well I think if if there's

1089
01:01:41,160 --> 01:01:43,520
no questions at this point then

1090
01:01:43,520 --> 01:01:46,760
uh we can we can end early and you can

1091
01:01:46,760 --> 01:01:48,559
go have lunch or

1092
01:01:48,559 --> 01:01:51,960
something before before there's like

1093
01:01:51,960 --> 01:01:53,680
huge

1094
01:01:53,680 --> 01:01:57,119
lines yeah yeah we can do that

1095
01:01:57,119 --> 01:01:58,880
okay

1096
01:01:58,880 --> 01:02:01,880
so

1097
01:02:07,160 --> 01:02:09,520
yeah so we'll see everybody on on

1098
01:02:09,520 --> 01:02:10,599
Thursday

1099
01:02:10,599 --> 01:02:15,039
then see on Thursday for the next

1100
01:02:18,480 --> 01:02:20,599
lecture

1101
01:02:20,599 --> 01:02:23,160
okay hey El you can stay online if you

1102
01:02:23,160 --> 01:02:27,839
want we can chat a little more

1103
01:02:28,520 --> 01:02:31,920
plan a little bit what's

1104
01:02:35,960 --> 01:02:39,440
next yeah thank

1105
01:02:40,440 --> 01:02:42,600
you

1106
01:02:42,600 --> 01:02:45,779
[Music]

1107
01:02:54,839 --> 01:03:02,119
okay foreign fore foreign spee

1108
01:03:22,319 --> 01:03:25,319
spee

