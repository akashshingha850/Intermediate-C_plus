1
00:00:25,480 --> 00:00:28,880
okay miss

2
00:00:28,960 --> 00:00:31,960
me

3
00:00:58,920 --> 00:01:01,920
okay

4
00:01:19,170 --> 00:01:22,310
[Music]

5
00:01:28,920 --> 00:01:31,920
see

6
00:01:58,840 --> 00:02:01,840
e

7
00:02:07,640 --> 00:02:10,598
okay you guys hear Us

8
00:02:15,440 --> 00:02:19,720
online we can

9
00:02:28,840 --> 00:02:31,840
okaying

10
00:02:33,400 --> 00:02:37,599
so do you the

11
00:02:37,599 --> 00:02:42,480
of um right so you go here you go to

12
00:02:42,480 --> 00:02:48,319
lectures and uh links to Google

13
00:02:51,680 --> 00:02:55,480
D it takes several hours so to just

14
00:02:55,480 --> 00:02:58,519
convert it for Zoom

15
00:02:58,519 --> 00:03:03,280
yeah then if I get distracted

16
00:03:09,080 --> 00:03:12,319
then ah yeah I forgot that I could have

17
00:03:12,319 --> 00:03:14,599
tried to do this maybe

18
00:03:14,599 --> 00:03:17,080
next probably microphone that would be

19
00:03:17,080 --> 00:03:19,440
better so I can walk around but now it's

20
00:03:19,440 --> 00:03:22,000
too late

21
00:03:22,680 --> 00:03:26,040
again okay so you guys pleas take these

22
00:03:26,040 --> 00:03:27,480
today they're

23
00:03:27,480 --> 00:03:33,000
2 have have 300 people in this

24
00:03:33,720 --> 00:03:36,400
class but they're recording lectures I

25
00:03:36,400 --> 00:03:39,439
guess so I have to tell you that more

26
00:03:39,439 --> 00:03:41,120
people completed the first two

27
00:03:41,120 --> 00:03:43,200
assignments than we have both here and

28
00:03:43,200 --> 00:03:45,159
on Zoom online

29
00:03:45,159 --> 00:03:49,159
now so 70 people already completed M

30
00:03:49,159 --> 00:03:51,439
five

31
00:03:52,879 --> 00:03:55,280
tutorial they're virtual

32
00:03:55,280 --> 00:03:57,760
students but they're very productive so

33
00:03:57,760 --> 00:04:01,680
no problem whatever works okay so let's

34
00:04:01,680 --> 00:04:03,720
start let's roll um I have some

35
00:04:03,720 --> 00:04:06,599
announcements for

36
00:04:06,640 --> 00:04:09,799
today let's

37
00:04:09,799 --> 00:04:13,319
see okay that's again uh first of all

38
00:04:13,319 --> 00:04:15,280
please whenever you complete your

39
00:04:15,280 --> 00:04:19,680
homework any whenever you're on any page

40
00:04:19,680 --> 00:04:21,440
uh on love La you can leave your

41
00:04:21,440 --> 00:04:25,120
feedback so to us it looks like this see

42
00:04:25,120 --> 00:04:26,320
it's

43
00:04:26,320 --> 00:04:29,160
Anonymous and um this is very positive

44
00:04:29,160 --> 00:04:31,360
feedback we got some not of posit

45
00:04:31,360 --> 00:04:33,600
positive feedback we want all of it

46
00:04:33,600 --> 00:04:35,880
because we just want to know how did it

47
00:04:35,880 --> 00:04:37,199
feel for you to go through these

48
00:04:37,199 --> 00:04:40,240
assignments because uh then we'll see

49
00:04:40,240 --> 00:04:42,199
the distribution or what's going on

50
00:04:42,199 --> 00:04:44,759
we'll we'll know what's going on really

51
00:04:44,759 --> 00:04:47,960
uh with the um with this assignment so

52
00:04:47,960 --> 00:04:50,440
for example I can give

53
00:04:50,440 --> 00:04:53,240
you um I can show you where you leave

54
00:04:53,240 --> 00:04:55,960
your feedback so whenever you press the

55
00:04:55,960 --> 00:04:58,759
button send feedback that's when it will

56
00:04:58,759 --> 00:05:00,800
be anonymous

57
00:05:00,800 --> 00:05:03,479
and then we can go uh to the beginning

58
00:05:03,479 --> 00:05:05,039
and see the

59
00:05:05,039 --> 00:05:10,080
feedback and uh for example look at

60
00:05:10,080 --> 00:05:13,720
this so somebody really really

61
00:05:13,720 --> 00:05:19,360
struggled but I don't know who um

62
00:05:19,360 --> 00:05:21,960
yeah so this is

63
00:05:21,960 --> 00:05:26,319
um you know I I think we should have all

64
00:05:26,319 --> 00:05:27,880
of this kind of feedback so if you

65
00:05:27,880 --> 00:05:32,000
struggle just do say tell it to us and

66
00:05:32,000 --> 00:05:33,800
then we'll try to find an explanation

67
00:05:33,800 --> 00:05:37,039
and help but I think to that particular

68
00:05:37,039 --> 00:05:39,720
uh comment I have to remind you I think

69
00:05:39,720 --> 00:05:42,520
something that I

70
00:05:42,800 --> 00:05:46,520
forgot to remind oh

71
00:05:46,520 --> 00:05:49,479
oh okay I hope this is not you know what

72
00:05:49,479 --> 00:05:52,560
let me since we're let me make sure that

73
00:05:52,560 --> 00:05:54,400
I'm in the right directory because I may

74
00:05:54,400 --> 00:05:56,840
be using old versions of the slides yep

75
00:05:56,840 --> 00:05:58,400
I'm using old versions of the slides I

76
00:05:58,400 --> 00:06:00,160
didn't want do that

77
00:06:00,160 --> 00:06:02,360
sorry

78
00:06:02,360 --> 00:06:05,319
guys but since you are yep I'm in

79
00:06:05,319 --> 00:06:09,160
release leure slide I need to go to

80
00:06:09,360 --> 00:06:12,400
mod oh that's

81
00:06:12,400 --> 00:06:15,400
good

82
00:06:16,000 --> 00:06:19,080
okay okay let's start

83
00:06:19,080 --> 00:06:22,080
over

84
00:06:23,000 --> 00:06:27,319
that want that in my way okay so there

85
00:06:27,319 --> 00:06:28,560
you

86
00:06:28,560 --> 00:06:31,560
go

87
00:06:33,759 --> 00:06:37,199
so that particular

88
00:06:37,759 --> 00:06:41,560
feedback I would like

89
00:06:41,800 --> 00:06:45,639
to comment in it with this slide please

90
00:06:45,639 --> 00:06:47,479
remember that this is an intermediate

91
00:06:47,479 --> 00:06:49,440
level programming course which means

92
00:06:49,440 --> 00:06:51,440
that you have to be comfortable with at

93
00:06:51,440 --> 00:06:54,039
least one another programming language

94
00:06:54,039 --> 00:06:56,120
because if you're not then it the pace

95
00:06:56,120 --> 00:06:58,680
is just too fast because we are not

96
00:06:58,680 --> 00:07:00,400
really talking about programming or how

97
00:07:00,400 --> 00:07:02,560
you would communicate with a computer

98
00:07:02,560 --> 00:07:05,039
but more about this particular way of

99
00:07:05,039 --> 00:07:07,039
doing it other than the ones that you

100
00:07:07,039 --> 00:07:08,680
have to already know somehow whether

101
00:07:08,680 --> 00:07:12,199
it's Java c c or python uh all of those

102
00:07:12,199 --> 00:07:15,240
are good and I've seen that most of you

103
00:07:15,240 --> 00:07:17,680
have another programming language in

104
00:07:17,680 --> 00:07:20,000
your experience but if you don't then it

105
00:07:20,000 --> 00:07:21,680
is a struggle and then it will be

106
00:07:21,680 --> 00:07:23,199
extremely challenging to keep up with

107
00:07:23,199 --> 00:07:23,840
the

108
00:07:23,840 --> 00:07:27,000
course so but uh please share your

109
00:07:27,000 --> 00:07:28,599
experiences with us because still it's

110
00:07:28,599 --> 00:07:30,080
very valuable for for us it's very

111
00:07:30,080 --> 00:07:32,840
important to know uh whether it's too

112
00:07:32,840 --> 00:07:35,759
difficult easy or difficult or just

113
00:07:35,759 --> 00:07:38,479
simply difficult uh updates about the

114
00:07:38,479 --> 00:07:40,560
lab uh we didn't have many students in

115
00:07:40,560 --> 00:07:43,080
the lab last time however if you do we

116
00:07:43,080 --> 00:07:47,479
will not use TS 135 uh PCS at all um the

117
00:07:47,479 --> 00:07:51,240
reason is very complicated so um we just

118
00:07:51,240 --> 00:07:54,159
can't so the way it is done with the it

119
00:07:54,159 --> 00:07:56,039
it will be impossible

120
00:07:56,039 --> 00:07:58,879
unresolvable um other instructors tried

121
00:07:58,879 --> 00:08:01,240
it may take months if it's possible at

122
00:08:01,240 --> 00:08:04,280
all so we might try to do that in with

123
00:08:04,280 --> 00:08:06,919
the next installation of the course but

124
00:08:06,919 --> 00:08:10,000
it's not even worth spending time on it

125
00:08:10,000 --> 00:08:11,520
why it's impossible it's impossible for

126
00:08:11,520 --> 00:08:13,240
us which means that you have to if you

127
00:08:13,240 --> 00:08:15,159
don't have a laptop or PC you have to

128
00:08:15,159 --> 00:08:18,960
find a way to get it somehow please do

129
00:08:18,960 --> 00:08:21,639
uh students can borrow laptops so borrow

130
00:08:21,639 --> 00:08:23,639
laptops so that you have more control of

131
00:08:23,639 --> 00:08:25,720
over it and then you can install the

132
00:08:25,720 --> 00:08:27,520
virtual machine and have this Linux

133
00:08:27,520 --> 00:08:30,080
environment to mimic EX what we do in

134
00:08:30,080 --> 00:08:32,640
lectures and to work on your assignments

135
00:08:32,640 --> 00:08:35,120
so we will not use those PCS at all we

136
00:08:35,120 --> 00:08:40,039
can't it's impossible okay um so any

137
00:08:40,039 --> 00:08:42,360
questions about that if you have any

138
00:08:42,360 --> 00:08:46,240
questions please tell me but we decided

139
00:08:46,240 --> 00:08:48,839
that maybe to mitigate this and also

140
00:08:48,839 --> 00:08:51,800
we've seen very low turnout in Labs so

141
00:08:51,800 --> 00:08:54,160
we can have some tutoring online in

142
00:08:54,160 --> 00:08:56,360
Discord and that means it will be more

143
00:08:56,360 --> 00:08:58,720
flexible hours we can have like some

144
00:08:58,720 --> 00:09:00,680
some kind of sign L up sheets for

145
00:09:00,680 --> 00:09:02,120
sometimes and if we see that you're

146
00:09:02,120 --> 00:09:04,720
there we just go share our screens

147
00:09:04,720 --> 00:09:07,399
change the problems so it's kind of

148
00:09:07,399 --> 00:09:10,920
online but live U debugging together so

149
00:09:10,920 --> 00:09:14,760
I want to ask you guys online and here

150
00:09:14,760 --> 00:09:18,079
um which way do you

151
00:09:26,200 --> 00:09:30,279
prefer hold on I'll go back where did

152
00:09:30,279 --> 00:09:34,680
jump no no no no jump too

153
00:09:35,760 --> 00:09:40,560
far there okay so which way do you

154
00:09:40,560 --> 00:09:43,519
prefer this

155
00:09:43,519 --> 00:09:45,399
one

156
00:09:45,399 --> 00:09:48,959
okay there you go see it's a very small

157
00:09:48,959 --> 00:09:51,920
number of answers but okay so we'll do

158
00:09:51,920 --> 00:09:54,079
that right we still we only have two

159
00:09:54,079 --> 00:09:56,240
hours in physical lab that's not enough

160
00:09:56,240 --> 00:09:58,200
of course you all of you might have more

161
00:09:58,200 --> 00:09:59,880
questions about debugging

162
00:09:59,880 --> 00:10:02,600
so we can do that virtually then in a

163
00:10:02,600 --> 00:10:04,040
virtual

164
00:10:04,040 --> 00:10:06,839
space and those of you who have who

165
00:10:06,839 --> 00:10:08,920
prefer physical lab we still have it but

166
00:10:08,920 --> 00:10:10,440
please bring your laptop like there

167
00:10:10,440 --> 00:10:12,120
there's no other

168
00:10:12,120 --> 00:10:14,440
way that we can

169
00:10:14,440 --> 00:10:16,800
proceed okay if you have any questions

170
00:10:16,800 --> 00:10:20,240
here please also post uh in

171
00:10:20,240 --> 00:10:22,399
Q&A this is the to-do list just a

172
00:10:22,399 --> 00:10:23,920
reminder you already know that you have

173
00:10:23,920 --> 00:10:26,160
to start with setup instructions please

174
00:10:26,160 --> 00:10:28,320
raise your hand here if You' done that

175
00:10:28,320 --> 00:10:30,240
already

176
00:10:30,240 --> 00:10:33,120
what about lab intro done

177
00:10:33,120 --> 00:10:36,839
already okay what about M file

178
00:10:36,839 --> 00:10:39,519
tutorial I see lots of hands online as

179
00:10:39,519 --> 00:10:44,200
well okay good job um so actually 70

180
00:10:44,200 --> 00:10:48,519
people 25% of our course trist have done

181
00:10:48,519 --> 00:10:50,560
Mall

182
00:10:50,560 --> 00:10:52,680
tutorial that's um that's very

183
00:10:52,680 --> 00:10:56,240
surprising for me but way to go uh I

184
00:10:56,240 --> 00:10:58,279
assume those students already know C++

185
00:10:58,279 --> 00:11:01,200
quite well and why they're not here yeah

186
00:11:01,200 --> 00:11:02,839
ask about the

187
00:11:02,839 --> 00:11:06,680
deadlines The LAB Works like deadlines

188
00:11:06,680 --> 00:11:08,600
on Sunday

189
00:11:08,600 --> 00:11:12,079
but Mach problems

190
00:11:12,079 --> 00:11:14,959
are I think I try to distribute them in

191
00:11:14,959 --> 00:11:17,480
some way so that it's reasonable uh

192
00:11:17,480 --> 00:11:19,920
there's no particular answer is it

193
00:11:19,920 --> 00:11:23,800
Monday is better

194
00:11:24,000 --> 00:11:28,160
than it's it's Weir that almost the

195
00:11:28,160 --> 00:11:31,240
deadline for one thing

196
00:11:33,519 --> 00:11:36,079
right um

197
00:11:36,079 --> 00:11:40,639
so on Discord please post your comments

198
00:11:40,639 --> 00:11:43,880
about deadlines because we um we might

199
00:11:43,880 --> 00:11:46,600
extend or Shuffle deadlines we might so

200
00:11:46,600 --> 00:11:48,040
if we have lots of

201
00:11:48,040 --> 00:11:50,560
requests like

202
00:11:50,560 --> 00:11:53,959
that which one is it MP intro or MF fall

203
00:11:53,959 --> 00:11:57,720
tutorial that is on Sunday yeah the lab

204
00:11:57,720 --> 00:12:00,519
team lab

205
00:12:00,519 --> 00:12:05,200
on Sundays yeah okay we can move them to

206
00:12:05,200 --> 00:12:07,200
Mondays it does sound reasonable sorry I

207
00:12:07,200 --> 00:12:08,920
have this us mentality where you know

208
00:12:08,920 --> 00:12:10,959
you do get most of your work done on a

209
00:12:10,959 --> 00:12:12,560
weekend and it's hard

210
00:12:12,560 --> 00:12:15,639
to we live in Finland we have to respect

211
00:12:15,639 --> 00:12:17,160
that you know on weekend you have you

212
00:12:17,160 --> 00:12:19,040
have to have balance between work and

213
00:12:19,040 --> 00:12:21,959
life right uh let's not have Sunday

214
00:12:21,959 --> 00:12:24,880
deadlines okay and if I forget remind me

215
00:12:24,880 --> 00:12:27,360
so it's going to be moved to

216
00:12:27,360 --> 00:12:31,000
Monday okay

217
00:12:31,000 --> 00:12:34,720
so uh any organizational kind of

218
00:12:34,720 --> 00:12:36,760
questions that you might

219
00:12:36,760 --> 00:12:41,199
have please let me know if you have any

220
00:12:41,199 --> 00:12:44,000
questions but otherwise the L also

221
00:12:44,000 --> 00:12:46,720
collide with many of our

222
00:12:46,720 --> 00:12:49,440
schedules I'm sure they are you know

223
00:12:49,440 --> 00:12:52,279
what I I

224
00:12:52,760 --> 00:12:55,760
think

225
00:12:56,880 --> 00:13:00,320
I this is a tough course like I I'm I'm

226
00:13:00,320 --> 00:13:03,360
warning it's it's it is what it

227
00:13:03,360 --> 00:13:06,440
is but remember you lose only certain

228
00:13:06,440 --> 00:13:08,839
amount and you still can

229
00:13:08,839 --> 00:13:11,760
recover uh quite well for your final

230
00:13:11,760 --> 00:13:14,480
grade so the the deadline you only lose

231
00:13:14,480 --> 00:13:17,320
20% at a time and nothing else so you

232
00:13:17,320 --> 00:13:20,800
can submit your Labs any other day but

233
00:13:20,800 --> 00:13:23,160
there should be some penalty so that for

234
00:13:23,160 --> 00:13:25,279
those of you who it works to have the

235
00:13:25,279 --> 00:13:27,399
schedule then you're motivated to keep

236
00:13:27,399 --> 00:13:30,920
up with it okay should love grade group

237
00:13:30,920 --> 00:13:33,079
assignment automatically for all members

238
00:13:33,079 --> 00:13:35,040
yes it will work like that so once it's

239
00:13:35,040 --> 00:13:37,360
graded the all the entire group should

240
00:13:37,360 --> 00:13:40,320
get the grade do I have to form a group

241
00:13:40,320 --> 00:13:41,800
no you don't have to if you like to be

242
00:13:41,800 --> 00:13:46,160
solo can we cry during the course

243
00:13:46,279 --> 00:13:49,839
yeah yes yes it's a Pilot Course

244
00:13:49,839 --> 00:13:52,000
remember that it's a pilot course so

245
00:13:52,000 --> 00:13:54,639
here's the deal if you pass it fast that

246
00:13:54,639 --> 00:13:57,199
means you're fluent in C++ if it takes

247
00:13:57,199 --> 00:13:59,120
time you're not fluent yet it's fine

248
00:13:59,120 --> 00:14:00,839
tring to be not fluent with the with the

249
00:14:00,839 --> 00:14:03,320
language I'm not fluent with with

250
00:14:03,320 --> 00:14:05,759
Finnish and moreover I'm so bad with

251
00:14:05,759 --> 00:14:10,160
Finnish so it takes time so cry and work

252
00:14:10,160 --> 00:14:12,639
I cry about finish I

253
00:14:12,639 --> 00:14:16,120
do okay is the am forat is also C++ code

254
00:14:16,120 --> 00:14:19,399
yes yes yes so the there will be some uh

255
00:14:19,399 --> 00:14:22,839
quiz questions today in the lecture and

256
00:14:22,839 --> 00:14:25,480
that's how you would expect one exam

257
00:14:25,480 --> 00:14:27,240
question look like so some kind of

258
00:14:27,240 --> 00:14:29,959
multiple choice question

259
00:14:29,959 --> 00:14:32,759
uh about some kind of code like like

260
00:14:32,759 --> 00:14:36,320
today in the lecture I meant it as in

261
00:14:36,320 --> 00:14:39,160
online and better than physical

262
00:14:39,160 --> 00:14:41,639
attendance okay will it be difficult to

263
00:14:41,639 --> 00:14:43,759
complete the lab test

264
00:14:43,759 --> 00:14:47,040
solo depends on how you work I think uh

265
00:14:47,040 --> 00:14:49,279
probably having a team is fine because

266
00:14:49,279 --> 00:14:51,440
then you can exchange ideas and debug

267
00:14:51,440 --> 00:14:53,519
together in parallel but if you already

268
00:14:53,519 --> 00:14:55,680
comfortable C++ I would I would go for

269
00:14:55,680 --> 00:14:59,320
solo then myself I meant so sorry I

270
00:14:59,320 --> 00:15:01,880
don't I didn't pick the first part of

271
00:15:01,880 --> 00:15:03,320
the

272
00:15:03,320 --> 00:15:06,399
question for this please put the whole

273
00:15:06,399 --> 00:15:09,320
thing how can it be the setup the sub

274
00:15:09,320 --> 00:15:10,720
system for

275
00:15:10,720 --> 00:15:13,800
Mac um right we didn't put anything for

276
00:15:13,800 --> 00:15:15,839
that we can find some links if you

277
00:15:15,839 --> 00:15:17,959
cannot figure it out if you figure it

278
00:15:17,959 --> 00:15:20,079
out anybody who has a Mac if you figure

279
00:15:20,079 --> 00:15:22,800
it out please post a link for a tutorial

280
00:15:22,800 --> 00:15:24,120
so that we can share it with other

281
00:15:24,120 --> 00:15:26,399
students I know off the top of my head

282
00:15:26,399 --> 00:15:29,040
that I know where a tutorial like that

283
00:15:29,040 --> 00:15:33,680
should exist so uh so we can find it

284
00:15:33,680 --> 00:15:36,160
just ask it on Discord and uh I'll find

285
00:15:36,160 --> 00:15:38,399
that link automatic review for groups

286
00:15:38,399 --> 00:15:39,680
doesn't

287
00:15:39,680 --> 00:15:43,360
work we'll check on that we'll check on

288
00:15:43,360 --> 00:15:45,079
that so yes thank you for letting me

289
00:15:45,079 --> 00:15:46,720
know it should

290
00:15:46,720 --> 00:15:50,000
so we'll fix the love list then does

291
00:15:50,000 --> 00:15:51,519
only one group member return the lab

292
00:15:51,519 --> 00:15:54,440
assignment or everybody just only one

293
00:15:54,440 --> 00:15:56,519
maybe your group is not fully uh

294
00:15:56,519 --> 00:15:58,440
properly formed there were some problems

295
00:15:58,440 --> 00:16:00,880
with forming groups in the past so we

296
00:16:00,880 --> 00:16:03,000
will have to look at that group and see

297
00:16:03,000 --> 00:16:05,440
what's happening so please send um post

298
00:16:05,440 --> 00:16:07,839
it on Discord as well and we'll figure

299
00:16:07,839 --> 00:16:09,040
it

300
00:16:09,040 --> 00:16:11,920
out yes you can submit multiple times so

301
00:16:11,920 --> 00:16:14,880
you submit you see the answer and um

302
00:16:14,880 --> 00:16:17,079
then you debug and get the full grade so

303
00:16:17,079 --> 00:16:18,759
submit as many times as you want just

304
00:16:18,759 --> 00:16:22,079
try it it's kind of like an online

305
00:16:22,079 --> 00:16:25,079
debugger

306
00:16:26,360 --> 00:16:29,519
okay so let's go back to our

307
00:16:29,519 --> 00:16:32,160
um code from last time I had this code

308
00:16:32,160 --> 00:16:35,560
right let me see what I uh help me put

309
00:16:35,560 --> 00:16:37,440
things or describe what's going on in

310
00:16:37,440 --> 00:16:41,120
this Co code so here I describe class

311
00:16:41,120 --> 00:16:43,720
sphere so this block of the code how

312
00:16:43,720 --> 00:16:46,040
would you call

313
00:16:46,040 --> 00:16:50,279
it it's the class fear

314
00:16:50,360 --> 00:16:53,759
what definition definition so it's class

315
00:16:53,759 --> 00:16:54,959
fear

316
00:16:54,959 --> 00:16:57,240
definition but there's member functions

317
00:16:57,240 --> 00:16:59,720
that are only declared there so we only

318
00:16:59,720 --> 00:17:01,279
see the function

319
00:17:01,279 --> 00:17:04,599
signatures um so we Define them in this

320
00:17:04,599 --> 00:17:06,959
block so here you could say it's class

321
00:17:06,959 --> 00:17:08,720
sphere

322
00:17:08,720 --> 00:17:10,919
member

323
00:17:10,919 --> 00:17:16,359
functions what definitions right

324
00:17:16,359 --> 00:17:21,438
definitions okay fine and what is this

325
00:17:21,959 --> 00:17:25,119
code yeah it's you it's it's a user of

326
00:17:25,119 --> 00:17:28,480
class sphere so we call it client it's a

327
00:17:28,480 --> 00:17:31,200
very small client code usually you have

328
00:17:31,200 --> 00:17:34,080
much bigger Force codes that might use

329
00:17:34,080 --> 00:17:37,400
your um classes that you design but this

330
00:17:37,400 --> 00:17:40,360
is an example of a client code that uses

331
00:17:40,360 --> 00:17:42,880
sphere okay very good so now I'm going

332
00:17:42,880 --> 00:17:45,960
to ask you a couple of questions so

333
00:17:45,960 --> 00:17:50,799
why why this is outside of the class

334
00:17:50,799 --> 00:17:53,360
definition

335
00:17:57,720 --> 00:18:01,720
itself the for example class rectangle

336
00:18:01,720 --> 00:18:05,400
we use the same kind of stuff Dieter so

337
00:18:05,400 --> 00:18:07,240
we could call it

338
00:18:07,240 --> 00:18:09,440
without them again

339
00:18:09,440 --> 00:18:13,880
inside so if there's another class here

340
00:18:13,880 --> 00:18:17,760
class Circle or

341
00:18:17,760 --> 00:18:21,280
Circle yeah but that's not the question

342
00:18:21,280 --> 00:18:24,720
why this description here at the

343
00:18:24,720 --> 00:18:28,200
question why did I put class uh sphere

344
00:18:28,200 --> 00:18:30,600
member fun fun definitions outside of

345
00:18:30,600 --> 00:18:33,159
the class itself why didn't I Define

346
00:18:33,159 --> 00:18:34,960
these guys inside of the class why

347
00:18:34,960 --> 00:18:37,280
didn't I Define those member functions

348
00:18:37,280 --> 00:18:39,960
inside why didn't I say what they're

349
00:18:39,960 --> 00:18:42,200
supposed to do here in curly brackets

350
00:18:42,200 --> 00:18:46,400
right there in the class

351
00:18:49,620 --> 00:18:51,400
[Music]

352
00:18:51,400 --> 00:18:54,200
itself well it would work like this too

353
00:18:54,200 --> 00:18:57,720
yeah it would work but

354
00:18:57,720 --> 00:19:00,440
originally like in the '90s

355
00:19:00,440 --> 00:19:04,919
you compile with C and H F uh at a

356
00:19:04,919 --> 00:19:09,880
different time and in+ code in the H

357
00:19:09,880 --> 00:19:12,640
because it was too big for the

358
00:19:12,640 --> 00:19:16,640
compiler um yes so that's one of the M

359
00:19:16,640 --> 00:19:18,640
it's it's one of the reasons to explain

360
00:19:18,640 --> 00:19:20,360
it but you know in

361
00:19:20,360 --> 00:19:22,960
C++ we could do it both ways and it

362
00:19:22,960 --> 00:19:25,200
would still compile so why so it would

363
00:19:25,200 --> 00:19:28,559
be a design Choice then so why we chose

364
00:19:28,559 --> 00:19:30,240
the these member functions to take

365
00:19:30,240 --> 00:19:33,039
outside of the class definition and it's

366
00:19:33,039 --> 00:19:35,120
you can put them inside but then your

367
00:19:35,120 --> 00:19:37,520
class definition will grow significantly

368
00:19:37,520 --> 00:19:38,960
you would have all of the mess because

369
00:19:38,960 --> 00:19:40,440
maybe some of this functions is very

370
00:19:40,440 --> 00:19:42,880
long maybe it takes another it's an

371
00:19:42,880 --> 00:19:45,200
entire Library what it does right like

372
00:19:45,200 --> 00:19:46,720
maybe there's too much code and you

373
00:19:46,720 --> 00:19:49,080
would Clump it all together inside of

374
00:19:49,080 --> 00:19:50,960
the class definition and it would be

375
00:19:50,960 --> 00:19:53,320
hard to read it then so so that's

376
00:19:53,320 --> 00:19:55,480
another reason right like that's also a

377
00:19:55,480 --> 00:19:57,440
a valid reason it's a design choice you

378
00:19:57,440 --> 00:20:00,400
want to take it out of of the class uh

379
00:20:00,400 --> 00:20:02,840
definition so that's good so now why do

380
00:20:02,840 --> 00:20:07,520
I have this sphere uh double

381
00:20:07,520 --> 00:20:09,840
colon right here why do I have to

382
00:20:09,840 --> 00:20:11,840
specify

383
00:20:11,840 --> 00:20:16,199
it scope resolution operator

384
00:20:22,000 --> 00:20:25,200
because they know which which class it

385
00:20:25,200 --> 00:20:27,000
belongs to because it could be also a

386
00:20:27,000 --> 00:20:29,120
circle class right before share class

387
00:20:29,120 --> 00:20:31,919
that I Define with its interface and its

388
00:20:31,919 --> 00:20:35,000
member uh function signatures and it

389
00:20:35,000 --> 00:20:37,720
could also be uh get diameter and set

390
00:20:37,720 --> 00:20:39,799
radius there so you have to really

391
00:20:39,799 --> 00:20:42,080
specify which of the classes the set

392
00:20:42,080 --> 00:20:45,039
radius is circle or sphere otherwise

393
00:20:45,039 --> 00:20:47,080
it's not clear right because it's

394
00:20:47,080 --> 00:20:52,200
outside of the class okay good now uh

395
00:20:52,200 --> 00:20:56,480
why so here is a a

396
00:20:56,480 --> 00:20:59,200
question can I say here

397
00:20:59,200 --> 00:21:01,720
in the client codee

398
00:21:01,720 --> 00:21:06,440
a um sorry a

399
00:21:06,440 --> 00:21:10,279
radius why why or why would I do this or

400
00:21:10,279 --> 00:21:14,000
why wouldn't I do this and I say

401
00:21:14,000 --> 00:21:17,600
five can I say that in the client

402
00:21:17,600 --> 00:21:20,760
code why

403
00:21:21,080 --> 00:21:24,400
not yeah it's in the private region so a

404
00:21:24,400 --> 00:21:27,080
client code cannot access private region

405
00:21:27,080 --> 00:21:30,360
right what can access private

406
00:21:30,360 --> 00:21:33,400
region what can use those

407
00:21:33,400 --> 00:21:35,760
variables only member functions that's

408
00:21:35,760 --> 00:21:37,880
why we have radias here right we can

409
00:21:37,880 --> 00:21:40,600
actually take it and change it and

410
00:21:40,600 --> 00:21:43,400
access it only from these guys Within

411
00:21:43,400 --> 00:21:45,720
These functions or member functions we

412
00:21:45,720 --> 00:21:49,120
can access private members the client

413
00:21:49,120 --> 00:21:51,080
code cannot do that it would be a

414
00:21:51,080 --> 00:21:55,159
compilation eror okay good um I think I

415
00:21:55,159 --> 00:21:56,720
don't have any questions about this

416
00:21:56,720 --> 00:21:59,000
anymore so we're good kind of we know

417
00:21:59,000 --> 00:22:01,080
what these blocks do so then the next

418
00:22:01,080 --> 00:22:02,400
you don't have this as in know your

419
00:22:02,400 --> 00:22:05,799
print out but I can say hey we don't

420
00:22:05,799 --> 00:22:07,720
have to put it outside of the class

421
00:22:07,720 --> 00:22:09,640
definition we can just take whatever is

422
00:22:09,640 --> 00:22:12,720
inside of this uh curly braces and put

423
00:22:12,720 --> 00:22:15,159
it inside of the class itself but bring

424
00:22:15,159 --> 00:22:17,320
all of the implementations within the

425
00:22:17,320 --> 00:22:20,039
cloud definition right so I don't have

426
00:22:20,039 --> 00:22:23,120
this code I just put whatever it does

427
00:22:23,120 --> 00:22:25,159
each member function and brought it

428
00:22:25,159 --> 00:22:27,279
inside and that would compile fine but

429
00:22:27,279 --> 00:22:28,640
then we wouldn't have the separation

430
00:22:28,640 --> 00:22:30,880
ation of interface from the

431
00:22:30,880 --> 00:22:33,279
implementation and also now bringing

432
00:22:33,279 --> 00:22:36,520
back to the compilation process also

433
00:22:36,520 --> 00:22:40,640
this first example first case where

434
00:22:40,640 --> 00:22:42,440
member function definitions are

435
00:22:42,440 --> 00:22:45,480
separated from the

436
00:22:45,640 --> 00:22:49,960
interface is good because then we can do

437
00:22:49,960 --> 00:22:53,159
more create more complex code structure

438
00:22:53,159 --> 00:22:55,039
and separate everything in different

439
00:22:55,039 --> 00:22:57,960
files so let's look at let me make sure

440
00:22:57,960 --> 00:23:00,159
that I put all of the things that I want

441
00:23:00,159 --> 00:23:04,520
to say here so look at this sphere. H

442
00:23:04,520 --> 00:23:07,799
file so these are called header

443
00:23:07,799 --> 00:23:11,400
files they're typically named after the

444
00:23:11,400 --> 00:23:13,039
class that is there but it can be a

445
00:23:13,039 --> 00:23:14,760
collection of classes so you can pick

446
00:23:14,760 --> 00:23:17,039
whatever name but here we would call it

447
00:23:17,039 --> 00:23:20,840
sphere. h so that's a header file and it

448
00:23:20,840 --> 00:23:22,799
contains the interface so all the

449
00:23:22,799 --> 00:23:25,360
interfaces to the class classes that are

450
00:23:25,360 --> 00:23:27,440
defined there so

451
00:23:27,440 --> 00:23:29,000
interfaces

452
00:23:29,000 --> 00:23:33,320
okay and now this is sphere. CPP it only

453
00:23:33,320 --> 00:23:36,120
has implementations so it's called

454
00:23:36,120 --> 00:23:37,840
source

455
00:23:37,840 --> 00:23:42,360
file it's store in CPP and typically by

456
00:23:42,360 --> 00:23:44,480
convention we call it sphere because

457
00:23:44,480 --> 00:23:47,080
that's the class that we store to store

458
00:23:47,080 --> 00:23:49,360
in there the implementations of that for

459
00:23:49,360 --> 00:23:53,480
that class and it can it contains all of

460
00:23:53,480 --> 00:23:55,919
the definitions of those functions or uh

461
00:23:55,919 --> 00:23:58,640
implementations of the functions and

462
00:23:58,640 --> 00:24:01,480
this is the client code right very

463
00:24:01,480 --> 00:24:03,640
simple client code so now if you want to

464
00:24:03,640 --> 00:24:05,559
compile

465
00:24:05,559 --> 00:24:08,240
it that's what the make file tutorial

466
00:24:08,240 --> 00:24:10,919
all about it tells you in much more

467
00:24:10,919 --> 00:24:14,200
detail how we compile then all of this

468
00:24:14,200 --> 00:24:18,720
files together to re to obtain the same

469
00:24:18,720 --> 00:24:21,720
executable as we would get if we were

470
00:24:21,720 --> 00:24:24,880
compiled to our first program

471
00:24:24,880 --> 00:24:29,000
CPP so that's where we have your um um

472
00:24:29,000 --> 00:24:31,200
print outs we have these two side by

473
00:24:31,200 --> 00:24:34,200
side so separated program into three

474
00:24:34,200 --> 00:24:37,720
files and just program CPP in

475
00:24:37,720 --> 00:24:42,760
one file so here you just compile a g++

476
00:24:42,760 --> 00:24:45,279
program

477
00:24:45,279 --> 00:24:49,240
CPP and you obtain your executable right

478
00:24:49,240 --> 00:24:52,919
but to compile your sphere CPP you need

479
00:24:52,919 --> 00:24:56,600
to compile it and with the flag minus C

480
00:24:56,600 --> 00:24:59,080
saying okay please don't create an

481
00:24:59,080 --> 00:25:01,320
executable please don't

482
00:25:01,320 --> 00:25:04,679
look for main function because there's

483
00:25:04,679 --> 00:25:07,600
none in my sphere CPP there's no main

484
00:25:07,600 --> 00:25:10,039
function there

485
00:25:10,039 --> 00:25:14,200
include quotes sphere. so all of this

486
00:25:14,200 --> 00:25:17,039
file the compiler treat it as if it was

487
00:25:17,039 --> 00:25:19,080
just inside of there so it can be

488
00:25:19,080 --> 00:25:20,880
compiled together it's fine it just

489
00:25:20,880 --> 00:25:24,360
cannot be created uh made in executable

490
00:25:24,360 --> 00:25:26,600
because there is no main function but it

491
00:25:26,600 --> 00:25:31,799
can create instead sphere. o which is an

492
00:25:31,799 --> 00:25:35,840
object file which is a machine Cod for

493
00:25:35,840 --> 00:25:38,360
everything for all of the steps that can

494
00:25:38,360 --> 00:25:40,799
be executed in this

495
00:25:40,799 --> 00:25:43,320
code without creating executable so

496
00:25:43,320 --> 00:25:45,039
without the start without the control

497
00:25:45,039 --> 00:25:47,640
room the main function right so this

498
00:25:47,640 --> 00:25:51,039
sphere. o is created after you run

499
00:25:51,039 --> 00:25:55,159
this on sphere CPP now you can

500
00:25:55,159 --> 00:25:59,000
separately compile main CPP and let's

501
00:25:59,000 --> 00:26:01,960
see let's look main CPP call

502
00:26:01,960 --> 00:26:05,039
sphere class and we include the

503
00:26:05,039 --> 00:26:08,279
interface for sphere class right

504
00:26:08,279 --> 00:26:13,960
there therefore compiling it g++ with it

505
00:26:13,960 --> 00:26:16,279
oh my

506
00:26:16,279 --> 00:26:21,679
god with the flag flag minus c main

507
00:26:21,679 --> 00:26:25,360
CPP will work just fine because it will

508
00:26:25,360 --> 00:26:27,240
create

509
00:26:27,240 --> 00:26:30,240
Main

510
00:26:30,640 --> 00:26:33,760
o object file which will have the

511
00:26:33,760 --> 00:26:37,000
machine code for all of the steps

512
00:26:37,000 --> 00:26:40,240
here without cre creating

513
00:26:40,240 --> 00:26:43,200
executable and then taking these two

514
00:26:43,200 --> 00:26:46,279
object files

515
00:26:46,520 --> 00:26:48,720
fear. I don't know if you guys online

516
00:26:48,720 --> 00:26:51,799
hear what we hear but it's awful here

517
00:26:51,799 --> 00:26:54,080
it's like some kind of drilling going

518
00:26:54,080 --> 00:26:57,240
on that drills inside of my

519
00:26:57,240 --> 00:27:00,240
head

520
00:27:00,399 --> 00:27:04,120
okay so then you can take this two

521
00:27:04,120 --> 00:27:07,120
executables oh sorry two objects and

522
00:27:07,120 --> 00:27:09,918
compile them

523
00:27:11,559 --> 00:27:14,918
together like

524
00:27:18,520 --> 00:27:21,640
this okay and then you'll get the same

525
00:27:21,640 --> 00:27:24,679
executable as this guy and the makefile

526
00:27:24,679 --> 00:27:27,000
tutorial will walk you through the steps

527
00:27:27,000 --> 00:27:28,760
where you can actually come compare all

528
00:27:28,760 --> 00:27:29,919
of the

529
00:27:29,919 --> 00:27:32,120
outputs to see that it's exactly the

530
00:27:32,120 --> 00:27:34,440
same thing except that it's distributed

531
00:27:34,440 --> 00:27:36,640
in several steps do you want to see how

532
00:27:36,640 --> 00:27:40,080
it's done like I have the code um for

533
00:27:40,080 --> 00:27:43,240
that so let's see I have the sphere

534
00:27:43,240 --> 00:27:45,799
directory you see let me remove my

535
00:27:45,799 --> 00:27:48,120
object

536
00:27:48,120 --> 00:27:51,600
files and executable so there main

537
00:27:51,600 --> 00:27:56,440
sphere CPP sphere. H so I run with the

538
00:27:56,440 --> 00:28:01,679
flag minus C the compiler on sphere

539
00:28:01,679 --> 00:28:05,240
CPP and look what it created it created

540
00:28:05,240 --> 00:28:09,200
the object file sphere. o right here

541
00:28:09,200 --> 00:28:13,440
right now I'm going to run the compiler

542
00:28:13,440 --> 00:28:15,399
on Main

543
00:28:15,399 --> 00:28:20,080
CPP and I list the files I have main. o

544
00:28:20,080 --> 00:28:23,399
and now I link together those two object

545
00:28:23,399 --> 00:28:27,120
files main. o or and sphere.

546
00:28:27,120 --> 00:28:30,919
O and I get a

547
00:28:30,919 --> 00:28:34,600
out I can run a out it gives me the

548
00:28:34,600 --> 00:28:37,399
diameter of the

549
00:28:38,440 --> 00:28:41,000
sphere so the problem with this is that

550
00:28:41,000 --> 00:28:43,840
I have to run these three lines moreover

551
00:28:43,840 --> 00:28:45,760
I have to remember all the dependencies

552
00:28:45,760 --> 00:28:47,279
like what depends on what what should be

553
00:28:47,279 --> 00:28:49,640
included what should go first so I don't

554
00:28:49,640 --> 00:28:51,640
want to do that that's why we create a

555
00:28:51,640 --> 00:28:54,799
script called make file and put all of

556
00:28:54,799 --> 00:28:56,200
those lines

557
00:28:56,200 --> 00:28:59,600
there and maybe maybe mate file tutorial

558
00:28:59,600 --> 00:29:01,360
seems like it's overwhelming and you

559
00:29:01,360 --> 00:29:04,200
have to learn so much in very short time

560
00:29:04,200 --> 00:29:07,760
but I have to comfort you that we will

561
00:29:07,760 --> 00:29:10,039
never ask you to write those mate files

562
00:29:10,039 --> 00:29:11,320
from

563
00:29:11,320 --> 00:29:13,640
scratch you can always borrow your

564
00:29:13,640 --> 00:29:16,440
previous mate file or our previous mate

565
00:29:16,440 --> 00:29:18,480
file and just modify it slightly because

566
00:29:18,480 --> 00:29:20,840
you added one more CPP file and you want

567
00:29:20,840 --> 00:29:24,159
to add creation of an object for that

568
00:29:24,159 --> 00:29:27,600
that's all so when you get a job as a

569
00:29:27,600 --> 00:29:30,080
programmer most likely somebody will

570
00:29:30,080 --> 00:29:32,159
give you their M file as well to start

571
00:29:32,159 --> 00:29:35,799
working from there so uh I never

572
00:29:35,799 --> 00:29:38,039
personally had to write a big mate file

573
00:29:38,039 --> 00:29:40,080
I have limited industry experience

574
00:29:40,080 --> 00:29:43,840
though uh but that that's how it is so

575
00:29:43,840 --> 00:29:45,440
we walk you through the process so that

576
00:29:45,440 --> 00:29:47,039
you understand it but don't get

577
00:29:47,039 --> 00:29:50,559
overwhelmed because because that's you

578
00:29:50,559 --> 00:29:52,519
will not have to work much with mate

579
00:29:52,519 --> 00:29:55,120
files from now on from now on you will

580
00:29:55,120 --> 00:29:56,840
have a mate file and all you'll have to

581
00:29:56,840 --> 00:29:59,360
do to compile will say will is to say

582
00:29:59,360 --> 00:30:01,960
make and it will run the script in make

583
00:30:01,960 --> 00:30:05,679
file and you have it done and then to

584
00:30:05,679 --> 00:30:08,519
remove like I had to remove my objects

585
00:30:08,519 --> 00:30:11,240
and executable but all you'll have to do

586
00:30:11,240 --> 00:30:14,159
is to run make clean and it will remove

587
00:30:14,159 --> 00:30:16,519
everything that was just created so that

588
00:30:16,519 --> 00:30:19,640
you can compile it all over again with

589
00:30:19,640 --> 00:30:24,919
make okay so it'll be it'll get easier

590
00:30:24,919 --> 00:30:29,960
uh with that okay any questions about it

591
00:30:31,760 --> 00:30:34,600
so that's your mate file tutorial now

592
00:30:34,600 --> 00:30:36,760
since we kind of know a little bit which

593
00:30:36,760 --> 00:30:38,960
way of writing this code you like the

594
00:30:38,960 --> 00:30:41,919
most so do you like it in one file or do

595
00:30:41,919 --> 00:30:44,679
you like it in three

596
00:30:44,679 --> 00:30:46,760
files and you know this is just an

597
00:30:46,760 --> 00:30:49,399
opinion so nobody will judge you for

598
00:30:49,399 --> 00:30:52,200
this you can pick either way case

599
00:30:52,200 --> 00:30:56,120
three and case one you know for the

600
00:30:56,120 --> 00:30:58,080
demonstration purposes for this

601
00:30:58,080 --> 00:30:59,720
particular code I would probably just

602
00:30:59,720 --> 00:31:02,880
write it in case one I would probably

603
00:31:02,880 --> 00:31:05,720
even bring my uh definitions of the

604
00:31:05,720 --> 00:31:07,799
functions inside of the class make it

605
00:31:07,799 --> 00:31:09,880
even shorter because it's a short amount

606
00:31:09,880 --> 00:31:14,000
of code but this case three really has a

607
00:31:14,000 --> 00:31:16,799
point and I think I started um talking

608
00:31:16,799 --> 00:31:19,440
about it last time and I'll continue

609
00:31:19,440 --> 00:31:21,279
with this but let's uh stop a little bit

610
00:31:21,279 --> 00:31:22,639
for the questions can you upload the

611
00:31:22,639 --> 00:31:24,320
slides to Google Drive that you have

612
00:31:24,320 --> 00:31:26,919
annotated ahuh I I thought I'll get

613
00:31:26,919 --> 00:31:29,519
annotated uh yes I do have annotation

614
00:31:29,519 --> 00:31:31,960
saved I could do that it takes some time

615
00:31:31,960 --> 00:31:34,279
so I may forget but there is you know

616
00:31:34,279 --> 00:31:36,799
there's um video so you can always see

617
00:31:36,799 --> 00:31:39,440
annotations there it takes me some time

618
00:31:39,440 --> 00:31:43,320
to load those annotations from siden so

619
00:31:43,320 --> 00:31:46,159
it's it's not trivial that's why I hope

620
00:31:46,159 --> 00:31:47,799
nobody would

621
00:31:47,799 --> 00:31:50,480
ask okay there are some questions on

622
00:31:50,480 --> 00:31:52,159
Zoom chat okay let's

623
00:31:52,159 --> 00:31:55,360
look avoid multiple definitions Our

624
00:31:55,360 --> 00:31:58,159
member functions tied to a class yes if

625
00:31:58,159 --> 00:32:02,000
so how do we know

626
00:32:02,000 --> 00:32:04,960
oops so the scope resolution operator

627
00:32:04,960 --> 00:32:07,279
helps us know which classes which

628
00:32:07,279 --> 00:32:09,919
function is that to which class does it

629
00:32:09,919 --> 00:32:13,120
belong so those double dots will make it

630
00:32:13,120 --> 00:32:15,960
super clear to the

631
00:32:15,960 --> 00:32:17,480
compiler

632
00:32:17,480 --> 00:32:19,960
okay so let's

633
00:32:19,960 --> 00:32:24,000
see yeah thought of curiously what does

634
00:32:24,000 --> 00:32:28,519
CPP stands for CPP yeah what does

635
00:32:28,519 --> 00:32:31,600
stand because you said it's like Source

636
00:32:31,600 --> 00:32:35,960
it's a Source One AG is better AG I knew

637
00:32:35,960 --> 00:32:38,559
it at some point good question I knew it

638
00:32:38,559 --> 00:32:43,960
at some point C++ I guess yeah probably

639
00:32:43,960 --> 00:32:47,399
right I know there will be hpps HPP

640
00:32:47,399 --> 00:32:51,120
files that's for templates so but CPP is

641
00:32:51,120 --> 00:32:52,880
pretty standard there's no other

642
00:32:52,880 --> 00:32:55,440
extensions that we use in CP for sources

643
00:32:55,440 --> 00:32:58,880
but I think it's C++ you're right

644
00:32:58,880 --> 00:33:00,840
HPB is not for

645
00:33:00,840 --> 00:33:04,720
templ in the IND use HP always for even

646
00:33:04,720 --> 00:33:08,120
even without template never use because

647
00:33:08,120 --> 00:33:12,240
it's going zero I see thank

648
00:33:12,240 --> 00:33:16,279
you uh so you can see that you you touch

649
00:33:16,279 --> 00:33:20,039
up some limitations of my knowledge here

650
00:33:20,039 --> 00:33:22,279
with some things because people who work

651
00:33:22,279 --> 00:33:25,559
in Industry on huge um projects they

652
00:33:25,559 --> 00:33:28,360
know U more things like that

653
00:33:28,360 --> 00:33:30,200
okay so

654
00:33:30,200 --> 00:33:34,279
now let's look at so I had a point with

655
00:33:34,279 --> 00:33:37,559
this the case three right so what's cool

656
00:33:37,559 --> 00:33:40,159
about case three let me make sure that I

657
00:33:40,159 --> 00:33:41,880
cover everything that I wanted to say

658
00:33:41,880 --> 00:33:43,679
about case

659
00:33:43,679 --> 00:33:46,519
three so that what's cool about it and

660
00:33:46,519 --> 00:33:48,320
here I just roughly say okay this is

661
00:33:48,320 --> 00:33:50,639
going to be your class interface in. H

662
00:33:50,639 --> 00:33:55,200
file uh by the way H at Oculus we had H

663
00:33:55,200 --> 00:33:57,960
files so I don't know maybe in some IND

664
00:33:57,960 --> 00:34:00,960
it's HPP only but in some companies but

665
00:34:00,960 --> 00:34:05,399
I've seen that H files in the past uh

666
00:34:05,399 --> 00:34:07,260
CPP is

667
00:34:07,260 --> 00:34:08,918
[Music]

668
00:34:08,918 --> 00:34:13,879
um is your source file and Main is um

669
00:34:13,879 --> 00:34:17,639
your client code let's look at what we

670
00:34:17,639 --> 00:34:20,239
can say about it so this touches up on

671
00:34:20,239 --> 00:34:23,359
in capsulation so a principal in C++

672
00:34:23,359 --> 00:34:26,399
that the client code does not have

673
00:34:26,399 --> 00:34:29,799
access to implement M

674
00:34:30,879 --> 00:34:33,760
mentation so what does it mean so there

675
00:34:33,760 --> 00:34:36,879
are two mechanisms in C++ that Implement

676
00:34:36,879 --> 00:34:39,000
encapsulation and one of them is

677
00:34:39,000 --> 00:34:41,719
separate compiling comp compilation of

678
00:34:41,719 --> 00:34:43,760
object files so the fact that you

679
00:34:43,760 --> 00:34:46,480
compile you can compile your main CPP

680
00:34:46,480 --> 00:34:49,960
file together with just H the interface

681
00:34:49,960 --> 00:34:53,480
and get your object and in order to

682
00:34:53,480 --> 00:34:54,280
create

683
00:34:54,280 --> 00:34:59,640
an I don't know what I but sorry this is

684
00:35:00,599 --> 00:35:02,800
where did it why did it go there I

685
00:35:02,800 --> 00:35:06,240
apologize I don't know what happened

686
00:35:08,920 --> 00:35:13,680
here where am I oh right

687
00:35:15,560 --> 00:35:18,640
right yeah yeah yeah it jumped me

688
00:35:18,640 --> 00:35:21,560
somewhere really far away

689
00:35:21,560 --> 00:35:24,680
yeah yeah tab maybe or something right

690
00:35:24,680 --> 00:35:26,640
okay so

691
00:35:26,640 --> 00:35:29,640
here

692
00:35:31,200 --> 00:35:32,839
the the fact that you can compile your

693
00:35:32,839 --> 00:35:35,880
main CPP separately into object file and

694
00:35:35,880 --> 00:35:38,119
in order to create executable all you

695
00:35:38,119 --> 00:35:43,200
need is object file from your code from

696
00:35:43,200 --> 00:35:45,800
your implementation code so you need

697
00:35:45,800 --> 00:35:49,240
this object file you need this H header

698
00:35:49,240 --> 00:35:52,359
file and you can create an executable

699
00:35:52,359 --> 00:35:54,160
hies

700
00:35:54,160 --> 00:35:56,720
implementation from the client so you

701
00:35:56,720 --> 00:35:59,119
can think of it as as there is this

702
00:35:59,119 --> 00:36:02,440
barbwired wall between your

703
00:36:02,440 --> 00:36:04,560
implementation your code and the client

704
00:36:04,560 --> 00:36:06,119
that's going to use it they're not going

705
00:36:06,119 --> 00:36:10,480
to see it ever so that's one mechanism

706
00:36:10,480 --> 00:36:14,359
of encapsulation that is

707
00:36:14,480 --> 00:36:17,480
separate

708
00:36:19,720 --> 00:36:23,279
compilation into

709
00:36:26,560 --> 00:36:29,359
objects so that's good that creates this

710
00:36:29,359 --> 00:36:31,880
wall between the client code

711
00:36:31,880 --> 00:36:35,560
implementations sources so uh if you

712
00:36:35,560 --> 00:36:37,920
were to design something some code and

713
00:36:37,920 --> 00:36:39,640
you want to sell it and you don't want

714
00:36:39,640 --> 00:36:41,599
to see the secrets of how you implement

715
00:36:41,599 --> 00:36:45,040
it all what you have to sell is your AG

716
00:36:45,040 --> 00:36:48,000
interfaces and your objects that's all

717
00:36:48,000 --> 00:36:49,599
that's it and the clients will be able

718
00:36:49,599 --> 00:36:51,720
to use it so that's one mechanism of

719
00:36:51,720 --> 00:36:53,839
encapsulation another mechanism of

720
00:36:53,839 --> 00:36:58,640
encapsulation is that you can hide

721
00:36:58,640 --> 00:37:01,680
private variables or representation of

722
00:37:01,680 --> 00:37:06,880
your classes of your objects from the um

723
00:37:06,880 --> 00:37:10,400
client as well so the client can see the

724
00:37:10,400 --> 00:37:12,520
private members but they cannot really

725
00:37:12,520 --> 00:37:16,520
change them they can only use so I I'm

726
00:37:16,520 --> 00:37:19,240
this is a hand they can only use in

727
00:37:19,240 --> 00:37:22,560
their code whatever is in public they

728
00:37:22,560 --> 00:37:25,480
cannot use you cannot up update change

729
00:37:25,480 --> 00:37:28,800
in any way modify private members they

730
00:37:28,800 --> 00:37:31,200
can call them from their code they can

731
00:37:31,200 --> 00:37:34,000
only see them that they're there but

732
00:37:34,000 --> 00:37:35,760
they don't know they they don't have

733
00:37:35,760 --> 00:37:37,440
access to them

734
00:37:37,440 --> 00:37:39,240
programmatically so they don't have

735
00:37:39,240 --> 00:37:40,640
access programmatically to this

736
00:37:40,640 --> 00:37:42,720
variables although they see them or

737
00:37:42,720 --> 00:37:45,319
functions but they cannot even see the

738
00:37:45,319 --> 00:37:48,880
client code so therefore if you use any

739
00:37:48,880 --> 00:37:51,480
class you should assume that you may

740
00:37:51,480 --> 00:37:53,160
never know how it's

741
00:37:53,160 --> 00:37:55,599
implemented so that also says something

742
00:37:55,599 --> 00:37:57,880
about designing your code right so

743
00:37:57,880 --> 00:37:59,599
whenever you design your class you

744
00:37:59,599 --> 00:38:01,480
should assume that clients will never

745
00:38:01,480 --> 00:38:03,839
need to know how things are implemented

746
00:38:03,839 --> 00:38:06,640
in order to use it okay so the number

747
00:38:06,640 --> 00:38:11,560
one uh then mechanism is the

748
00:38:11,560 --> 00:38:14,560
private

749
00:38:14,760 --> 00:38:17,560
members are

750
00:38:17,560 --> 00:38:21,200
not let's see what's the best way to I

751
00:38:21,200 --> 00:38:23,319
guess they cannot be modifi they cannot

752
00:38:23,319 --> 00:38:26,440
be modified canot are not

753
00:38:26,440 --> 00:38:29,440
modifiable

754
00:38:30,280 --> 00:38:32,720
by

755
00:38:33,160 --> 00:38:34,680
client

756
00:38:34,680 --> 00:38:37,319
okay so that's encapsulation that's a

757
00:38:37,319 --> 00:38:39,440
very important

758
00:38:39,440 --> 00:38:42,400
Concept in

759
00:38:42,400 --> 00:38:45,760
C++ okay so we did

760
00:38:45,760 --> 00:38:48,119
that

761
00:38:48,119 --> 00:38:52,160
um now I want to continue so I this is

762
00:38:52,160 --> 00:38:55,599
our code so this is our uhh file this is

763
00:38:55,599 --> 00:38:58,760
our CPP file this the same kind of code

764
00:38:58,760 --> 00:39:01,839
this is our main function main

765
00:39:01,839 --> 00:39:05,520
CPP I want you to look at this code and

766
00:39:05,520 --> 00:39:06,520
tell

767
00:39:06,520 --> 00:39:09,599
me what are things that we didn't touch

768
00:39:09,599 --> 00:39:14,119
on yet so are things that are different

769
00:39:14,119 --> 00:39:16,400
from C Java and python so let's just

770
00:39:16,400 --> 00:39:18,880
point at all of them so that we really

771
00:39:18,880 --> 00:39:20,560
understand the syntax okay so this is

772
00:39:20,560 --> 00:39:23,280
the question about syntax what's still

773
00:39:23,280 --> 00:39:28,040
unfamiliar what's still um is not clear

774
00:39:28,040 --> 00:39:30,839
why and and

775
00:39:30,839 --> 00:39:35,000
um so you can type your answers here I

776
00:39:35,000 --> 00:39:37,480
think it's whatever test but you guys

777
00:39:37,480 --> 00:39:40,079
can just tell me so all of those double

778
00:39:40,079 --> 00:39:43,680
columns you know or anything that you

779
00:39:43,680 --> 00:39:47,359
look and you don't know what it

780
00:39:50,280 --> 00:39:54,160
does what about that constant right here

781
00:39:54,160 --> 00:39:55,640
what does that

782
00:39:55,640 --> 00:39:58,000
do that's a new I just just planted it

783
00:39:58,000 --> 00:40:01,040
so that I know that and and line

784
00:40:01,040 --> 00:40:03,040
okay garbage

785
00:40:03,040 --> 00:40:05,000
collection we will actually start

786
00:40:05,000 --> 00:40:07,319
talking about stack today yeah very good

787
00:40:07,319 --> 00:40:09,440
so where does this ask where is it

788
00:40:09,440 --> 00:40:11,960
created and where does it go once the

789
00:40:11,960 --> 00:40:14,400
execution stopped we will talk about it

790
00:40:14,400 --> 00:40:17,520
today okay end line is just end of line

791
00:40:17,520 --> 00:40:19,319
character so if you don't put it then

792
00:40:19,319 --> 00:40:21,040
the next line will be printed right

793
00:40:21,040 --> 00:40:23,359
after so you don't you want to use that

794
00:40:23,359 --> 00:40:25,160
yeah radi Direction operator very good

795
00:40:25,160 --> 00:40:28,280
so that's double less than

796
00:40:28,280 --> 00:40:31,440
um I think I didn't talk about it last

797
00:40:31,440 --> 00:40:34,960
time so what it does this is an operator

798
00:40:34,960 --> 00:40:38,319
that takes whatever follows and inserts

799
00:40:38,319 --> 00:40:40,359
it into this

800
00:40:40,359 --> 00:40:42,920
stream into into the standard stream and

801
00:40:42,920 --> 00:40:45,359
this is a function that does it so C out

802
00:40:45,359 --> 00:40:48,720
is a function that we had in is stream

803
00:40:48,720 --> 00:40:52,640
Library so it takes the parameter and

804
00:40:52,640 --> 00:40:54,920
inserts it through this operator into

805
00:40:54,920 --> 00:40:57,359
the whatever stream it has which in this

806
00:40:57,359 --> 00:41:00,960
case is a standard out which is a

807
00:41:00,960 --> 00:41:05,599
terminal yeah so if this python be

808
00:41:05,599 --> 00:41:09,480
like see out

809
00:41:09,480 --> 00:41:11,440
brackets I

810
00:41:11,440 --> 00:41:15,480
guess I never um python is my le I never

811
00:41:15,480 --> 00:41:19,400
had experience in Python but um print F

812
00:41:19,400 --> 00:41:20,960
I guess in

813
00:41:20,960 --> 00:41:25,720
C yeah in Java what would it be

814
00:41:25,720 --> 00:41:29,240
i m

815
00:41:31,240 --> 00:41:33,880
yeah um but yeah

816
00:41:33,880 --> 00:41:36,520
this this just gets iner it's a very

817
00:41:36,520 --> 00:41:37,920
different syntax so this is very

818
00:41:37,920 --> 00:41:39,599
different from other languages it's not

819
00:41:39,599 --> 00:41:41,760
very clear right see out like it's very

820
00:41:41,760 --> 00:41:44,319
not even visible not readable to me that

821
00:41:44,319 --> 00:41:48,160
this is a print operation but it is

822
00:41:48,160 --> 00:41:50,599
yeah and there will be other things so

823
00:41:50,599 --> 00:41:53,760
other functions that we'll use to put

824
00:41:53,760 --> 00:41:56,319
things into different streams it can be

825
00:41:56,319 --> 00:41:59,200
into file you see that as well or you

826
00:41:59,200 --> 00:42:01,359
can override this so we'll learn a lot

827
00:42:01,359 --> 00:42:03,599
of TR you can override this operator and

828
00:42:03,599 --> 00:42:05,400
make it do whatever you want whatever

829
00:42:05,400 --> 00:42:08,119
other things you you want as

830
00:42:08,119 --> 00:42:10,440
well and use it for I don't know

831
00:42:10,440 --> 00:42:14,160
inserting pels into your um TG or

832
00:42:14,160 --> 00:42:16,200
something

833
00:42:16,200 --> 00:42:20,240
that okay anything else that is unusual

834
00:42:20,240 --> 00:42:22,440
and different so yeah you're right this

835
00:42:22,440 --> 00:42:25,359
is very unusual this is very unfamiliar

836
00:42:25,359 --> 00:42:28,480
this should be strange but one of the

837
00:42:28,480 --> 00:42:31,760
labs I think it's debug lab they'll will

838
00:42:31,760 --> 00:42:34,119
go with see out statements through

839
00:42:34,119 --> 00:42:35,760
debugging process so you'll get very

840
00:42:35,760 --> 00:42:37,160
comfortable with

841
00:42:37,160 --> 00:42:41,200
that um so this one is not is not a

842
00:42:41,200 --> 00:42:44,200
problem right the constant like what's

843
00:42:44,200 --> 00:42:48,000
that I didn't cover that at all yet so

844
00:42:48,000 --> 00:42:50,440
we will use constant quite a lot you can

845
00:42:50,440 --> 00:42:53,480
put constants inside of the uh arguments

846
00:42:53,480 --> 00:42:57,359
that you pass or here and usually

847
00:42:57,359 --> 00:42:59,480
constant means it's a promise and in

848
00:42:59,480 --> 00:43:02,040
this case if it's put in that place

849
00:43:02,040 --> 00:43:04,839
after the function signature it's a

850
00:43:04,839 --> 00:43:09,359
promise that this class sphere will not

851
00:43:09,359 --> 00:43:11,960
be changed will not be modified by this

852
00:43:11,960 --> 00:43:14,359
function which means that in this

853
00:43:14,359 --> 00:43:16,880
function you could not say the radius

854
00:43:16,880 --> 00:43:19,160
equals

855
00:43:19,160 --> 00:43:22,640
five so it's not the the object would

856
00:43:22,640 --> 00:43:25,200
not be modified by this operation so

857
00:43:25,200 --> 00:43:27,319
whatever whenever you call S get

858
00:43:27,319 --> 00:43:30,160
diameter this object is not modified

859
00:43:30,160 --> 00:43:34,839
because this function promises not to do

860
00:43:35,359 --> 00:43:38,079
that okay we will have constant we will

861
00:43:38,079 --> 00:43:40,119
talk about constant quite a lot so this

862
00:43:40,119 --> 00:43:43,280
is just the first time you see it and

863
00:43:43,280 --> 00:43:47,920
um um okay okay so now I have a question

864
00:43:47,920 --> 00:43:50,880
for you see what I did here in the same

865
00:43:50,880 --> 00:43:53,319
code that you just had I inserted one

866
00:43:53,319 --> 00:43:56,400
line and we already covered it so you

867
00:43:56,400 --> 00:43:59,520
probably know easily answer this this

868
00:43:59,520 --> 00:44:02,440
line as the radius private member equals

869
00:44:02,440 --> 00:44:04,760
2 from the client code so what exactly

870
00:44:04,760 --> 00:44:07,559
will happen

871
00:44:07,680 --> 00:44:10,079
here it just will not compile it will

872
00:44:10,079 --> 00:44:13,200
complain it will yell at you you

873
00:44:13,200 --> 00:44:16,760
cannot access private member I don't I

874
00:44:16,760 --> 00:44:18,520
don't remember exactly what it said like

875
00:44:18,520 --> 00:44:20,760
private variable cannot be modified or

876
00:44:20,760 --> 00:44:22,960
cannot be access something like that but

877
00:44:22,960 --> 00:44:25,079
it will be very clear what the compiler

878
00:44:25,079 --> 00:44:26,040
doesn't

879
00:44:26,040 --> 00:44:29,280
like um no it will not

880
00:44:29,280 --> 00:44:31,079
compile

881
00:44:31,079 --> 00:44:36,119
okay so let's see where's the next slide

882
00:44:36,119 --> 00:44:37,520
now I want to talk a little bit about

883
00:44:37,520 --> 00:44:40,400
Constructors so remember we talked we we

884
00:44:40,400 --> 00:44:42,119
discussed two functions only but we

885
00:44:42,119 --> 00:44:45,079
didn't discuss Constructors yet right

886
00:44:45,079 --> 00:44:47,559
but I mentioned last time that in the

887
00:44:47,559 --> 00:44:49,839
main function whenever you declare

888
00:44:49,839 --> 00:44:54,800
sphere. S A Constructor is called and a

889
00:44:54,800 --> 00:44:56,480
very good question is about garbage

890
00:44:56,480 --> 00:44:58,359
collection so so where is this variable

891
00:44:58,359 --> 00:45:00,160
going to be located that's the like once

892
00:45:00,160 --> 00:45:02,880
we're done with the syntax we'll start

893
00:45:02,880 --> 00:45:04,720
talking about the garbage collection in

894
00:45:04,720 --> 00:45:09,520
memory but for now this tells the system

895
00:45:09,520 --> 00:45:11,960
that a that a sphere needs to be created

896
00:45:11,960 --> 00:45:13,839
so the constructure is called and if you

897
00:45:13,839 --> 00:45:16,319
didn't Define in your

898
00:45:16,319 --> 00:45:19,319
CPP your Constructors then a default

899
00:45:19,319 --> 00:45:21,599
Constructor will be called a default no

900
00:45:21,599 --> 00:45:23,880
argument Constructor is provided by the

901
00:45:23,880 --> 00:45:25,960
system so this

902
00:45:25,960 --> 00:45:28,960
system

903
00:45:30,000 --> 00:45:32,839
provides

904
00:45:32,839 --> 00:45:34,640
default

905
00:45:34,640 --> 00:45:37,520
Constructor with no variables so with no

906
00:45:37,520 --> 00:45:40,160
arguments no

907
00:45:40,160 --> 00:45:42,760
arguments just like this so the default

908
00:45:42,760 --> 00:45:44,720
constructure provided by the system

909
00:45:44,720 --> 00:45:47,599
would be exactly that as if you were to

910
00:45:47,599 --> 00:45:50,800
write that nothing happens so you create

911
00:45:50,800 --> 00:45:55,040
a sphere with the um private variables

912
00:45:55,040 --> 00:45:57,359
the radius garbage or whatever that was

913
00:45:57,359 --> 00:45:59,760
whatever default value in the system so

914
00:45:59,760 --> 00:46:02,319
the it's undefined Behavior you don't

915
00:46:02,319 --> 00:46:03,640
know exactly what it's going to be

916
00:46:03,640 --> 00:46:06,599
because you didn't assign that radius

917
00:46:06,599 --> 00:46:08,760
right so that's

918
00:46:08,760 --> 00:46:11,040
cool but you might want to do something

919
00:46:11,040 --> 00:46:12,520
else you want might want to do something

920
00:46:12,520 --> 00:46:15,160
better right so if you want to rewrite a

921
00:46:15,160 --> 00:46:17,480
Constructor what would you put here if

922
00:46:17,480 --> 00:46:19,920
you that was your choice Your Design

923
00:46:19,920 --> 00:46:22,559
Choice what would you initialize the

924
00:46:22,559 --> 00:46:25,760
sphere radius

925
00:46:25,920 --> 00:46:28,920
to

926
00:46:32,599 --> 00:46:37,000
one unit zero

927
00:46:37,000 --> 00:46:39,240
[Music]

928
00:46:39,240 --> 00:46:42,200
okay yeah you know zero output one still

929
00:46:42,200 --> 00:46:44,880
because unit kind of unit you you but

930
00:46:44,880 --> 00:46:47,680
maybe zero is good you know you'll have

931
00:46:47,680 --> 00:46:49,760
reasons right it's a it's a design

932
00:46:49,760 --> 00:46:52,240
choice there's no right answer here in

933
00:46:52,240 --> 00:46:53,640
this class because we don't know what's

934
00:46:53,640 --> 00:46:55,520
going to be what's going to be used what

935
00:46:55,520 --> 00:46:57,040
the Spheres are going to be used for

936
00:46:57,040 --> 00:46:59,559
right now just because we're talking

937
00:46:59,559 --> 00:47:02,559
about synx I could say

938
00:47:02,559 --> 00:47:05,880
that I could do the same thing

939
00:47:05,880 --> 00:47:08,599
syntactically so it's the same thing if

940
00:47:08,599 --> 00:47:10,240
I just said

941
00:47:10,240 --> 00:47:13,440
this what's the now I'm creeping out why

942
00:47:13,440 --> 00:47:16,760
is it double is it a

943
00:47:17,839 --> 00:47:22,920
color oh no no no okay 1.0 there you go

944
00:47:22,920 --> 00:47:25,839
nothing else nothing happens let me just

945
00:47:25,839 --> 00:47:30,599
double check my my head went blank yeah

946
00:47:30,599 --> 00:47:33,480
yeah okay so that's good if you had

947
00:47:33,480 --> 00:47:37,119
other um private variables then for

948
00:47:37,119 --> 00:47:40,359
example color then you would do this

949
00:47:40,359 --> 00:47:42,160
color

950
00:47:42,160 --> 00:47:45,240
red however red is defined so you would

951
00:47:45,240 --> 00:47:47,280
just use comma and put all of them and

952
00:47:47,280 --> 00:47:49,000
you could list that and that would be

953
00:47:49,000 --> 00:47:51,880
equivalent syntactically equivalent to

954
00:47:51,880 --> 00:47:55,920
putting it here color equals red okay so

955
00:47:55,920 --> 00:47:58,079
this is are equivalent Constructors but

956
00:47:58,079 --> 00:48:00,280
just

957
00:48:00,280 --> 00:48:03,359
different uh ways of writing the same

958
00:48:03,359 --> 00:48:06,760
thing okay so that's cool this is a no

959
00:48:06,760 --> 00:48:09,160
argument Constructor but maybe when I

960
00:48:09,160 --> 00:48:11,160
create a

961
00:48:11,160 --> 00:48:14,359
sphere oh let me say t maybe I already

962
00:48:14,359 --> 00:48:16,079
know what the diameter is what the

963
00:48:16,079 --> 00:48:18,480
radius is going to be so uh the Syntax

964
00:48:18,480 --> 00:48:21,240
for that would be

965
00:48:23,800 --> 00:48:28,040
two so create a sphere t with a radius

966
00:48:28,040 --> 00:48:31,400
two and then so far the way we

967
00:48:31,400 --> 00:48:33,720
implemented this Constructors we don't

968
00:48:33,720 --> 00:48:37,079
have an argument Constructor so we would

969
00:48:37,079 --> 00:48:38,800
have to write it you would have to write

970
00:48:38,800 --> 00:48:41,119
it and its signature would be this it

971
00:48:41,119 --> 00:48:43,040
would take one

972
00:48:43,040 --> 00:48:45,680
argument which is the radius and how

973
00:48:45,680 --> 00:48:47,720
would you implement it then well you

974
00:48:47,720 --> 00:48:50,520
would say the radius the private uh

975
00:48:50,520 --> 00:48:54,920
variable member equals to whatever is

976
00:48:54,920 --> 00:48:58,720
passed as an argument

977
00:48:59,760 --> 00:49:01,480
now I have a

978
00:49:01,480 --> 00:49:04,960
question what if I since it's equivalent

979
00:49:04,960 --> 00:49:06,960
to write it either way what if I would

980
00:49:06,960 --> 00:49:12,280
write it like this column the

981
00:49:12,520 --> 00:49:15,400
radius equal is

982
00:49:15,400 --> 00:49:20,160
r and would not write it here it's

983
00:49:20,160 --> 00:49:23,160
equivalent is that a good design Choice

984
00:49:23,160 --> 00:49:25,319
like could you think why or why not

985
00:49:25,319 --> 00:49:28,720
would you do that

986
00:49:30,359 --> 00:49:32,920
so this is a oneline assignment so you

987
00:49:32,920 --> 00:49:35,760
lose the opportunity to check for errors

988
00:49:35,760 --> 00:49:38,880
what if uh your client will send a

989
00:49:38,880 --> 00:49:41,760
negative radius or something bad if it's

990
00:49:41,760 --> 00:49:43,760
a oneline assignment you you lose that

991
00:49:43,760 --> 00:49:45,799
opportunity but here you could put any

992
00:49:45,799 --> 00:49:49,440
kind of statements like if R is greater

993
00:49:49,440 --> 00:49:51,520
than zero only or whatever you want to

994
00:49:51,520 --> 00:49:53,040
do

995
00:49:53,040 --> 00:49:56,400
okay right so you may want to do that or

996
00:49:56,400 --> 00:49:57,920
may not not but just think about the

997
00:49:57,920 --> 00:50:01,000
choices like what one line is one line

998
00:50:01,000 --> 00:50:03,079
you cannot put any kind of other

999
00:50:03,079 --> 00:50:06,000
statements there

1000
00:50:06,000 --> 00:50:09,680
okay so um did I mention everything that

1001
00:50:09,680 --> 00:50:14,480
we had here I think so but let me say

1002
00:50:14,480 --> 00:50:16,319
this so what

1003
00:50:16,319 --> 00:50:19,799
if so another Point here what if I say

1004
00:50:19,799 --> 00:50:22,640
well I do need an argument

1005
00:50:22,640 --> 00:50:25,480
Constructor but I don't need a default

1006
00:50:25,480 --> 00:50:27,280
like I don't need to write it I use just

1007
00:50:27,280 --> 00:50:30,400
the systems one right so I don't want to

1008
00:50:30,400 --> 00:50:32,920
write this code I just want to write

1009
00:50:32,920 --> 00:50:35,960
this uh custom Constructor with one

1010
00:50:35,960 --> 00:50:39,359
argument but use the systems default one

1011
00:50:39,359 --> 00:50:41,119
no argument Constructor and that's

1012
00:50:41,119 --> 00:50:45,839
impossible so the rule of C++ is that if

1013
00:50:45,839 --> 00:50:48,839
you

1014
00:50:49,240 --> 00:50:53,440
write one Constructor so a

1015
00:50:53,440 --> 00:50:56,079
Constructor you need to write so the

1016
00:50:56,079 --> 00:50:58,680
system Prov provides none then the

1017
00:50:58,680 --> 00:51:02,359
system then the

1018
00:51:02,839 --> 00:51:06,279
system provides

1019
00:51:07,480 --> 00:51:10,960
none so it'll yell at you here they'll

1020
00:51:10,960 --> 00:51:13,000
say no no no no no you cannot use this

1021
00:51:13,000 --> 00:51:15,240
line

1022
00:51:15,240 --> 00:51:19,799
anymore you cannot declare a sphere s

1023
00:51:19,799 --> 00:51:22,000
because he didn't write a no argument

1024
00:51:22,000 --> 00:51:24,799
Constructor so the system provides know

1025
00:51:24,799 --> 00:51:28,240
now another one is that

1026
00:51:28,240 --> 00:51:31,920
Constructors are called by the

1027
00:51:31,920 --> 00:51:35,359
system by the system so it's more like

1028
00:51:35,359 --> 00:51:36,640
English

1029
00:51:36,640 --> 00:51:39,079
semantics

1030
00:51:39,079 --> 00:51:41,480
point you cannot say oh just call a

1031
00:51:41,480 --> 00:51:43,359
Constructor you wrote this functions

1032
00:51:43,359 --> 00:51:45,839
just call them no the system will decide

1033
00:51:45,839 --> 00:51:48,480
when it's appropriate and one case of

1034
00:51:48,480 --> 00:51:50,160
such

1035
00:51:50,160 --> 00:51:52,960
uh call to the Constructor is

1036
00:51:52,960 --> 00:51:55,040
Declaration of the variable and there

1037
00:51:55,040 --> 00:51:57,480
will be many other cas where we'll

1038
00:51:57,480 --> 00:51:59,520
investigate in lectures where the

1039
00:51:59,520 --> 00:52:01,200
constructors will be invoked and the

1040
00:52:01,200 --> 00:52:04,319
system decides on that okay and it's

1041
00:52:04,319 --> 00:52:05,760
very important to know when they're

1042
00:52:05,760 --> 00:52:08,599
invoked when you write your code you

1043
00:52:08,599 --> 00:52:10,240
don't call the Constructor but it will

1044
00:52:10,240 --> 00:52:12,160
be invoked there so it's very important

1045
00:52:12,160 --> 00:52:13,040
know

1046
00:52:13,040 --> 00:52:15,680
when um for debugging

1047
00:52:15,680 --> 00:52:18,880
purposes okay

1048
00:52:18,880 --> 00:52:23,119
so we are done with this part of the

1049
00:52:23,119 --> 00:52:25,920
topics and we are jumping to memory now

1050
00:52:25,920 --> 00:52:28,640
so unless you have any questions so for

1051
00:52:28,640 --> 00:52:32,160
right now you have a very simple uh idea

1052
00:52:32,160 --> 00:52:34,240
of how to write a very simple function

1053
00:52:34,240 --> 00:52:37,559
split it into several files compile them

1054
00:52:37,559 --> 00:52:39,960
together and have a simple class there

1055
00:52:39,960 --> 00:52:42,119
right so now the question is about

1056
00:52:42,119 --> 00:52:44,559
memory how is that class created where

1057
00:52:44,559 --> 00:52:46,640
it's created how do we clean it up right

1058
00:52:46,640 --> 00:52:48,640
what how is memory manage managed and

1059
00:52:48,640 --> 00:52:52,880
that's where we go into the um topic of

1060
00:52:52,880 --> 00:52:55,160
pointers it's a

1061
00:52:55,160 --> 00:52:58,000
very it's a very difficult topic so if

1062
00:52:58,000 --> 00:52:59,799
you're new to pointers and memory

1063
00:52:59,799 --> 00:53:03,079
management it can be extremely

1064
00:53:03,079 --> 00:53:06,040
frustrating and um so let's let's see

1065
00:53:06,040 --> 00:53:07,960
how it goes we'll try to make it as

1066
00:53:07,960 --> 00:53:10,440
clear as possible

1067
00:53:10,440 --> 00:53:12,880
but but it takes time to get used to

1068
00:53:12,880 --> 00:53:14,920
them most side what is going I don't

1069
00:53:14,920 --> 00:53:18,200
want this I want just this okay

1070
00:53:18,200 --> 00:53:20,880
okay so we have new slided

1071
00:53:20,880 --> 00:53:24,880
ATC memory let's see so I will use an

1072
00:53:24,880 --> 00:53:26,520
analogy because we really don't need

1073
00:53:26,520 --> 00:53:29,920
need to understand the hardware we don't

1074
00:53:29,920 --> 00:53:33,160
the analogy will be enough and therefore

1075
00:53:33,160 --> 00:53:36,359
instead of the actual memory RAM stick

1076
00:53:36,359 --> 00:53:38,440
that you can buy and put into your

1077
00:53:38,440 --> 00:53:40,960
computer or PC I'll use this do you know

1078
00:53:40,960 --> 00:53:42,960
what that

1079
00:53:42,960 --> 00:53:48,240
is Google Maps image right so that's a a

1080
00:53:48,240 --> 00:53:53,240
neighborhood so just like in this map or

1081
00:53:53,240 --> 00:53:54,480
in this

1082
00:53:54,480 --> 00:53:58,520
neighborhood any place has its address

1083
00:53:58,520 --> 00:54:01,280
so you can refer to any place any house

1084
00:54:01,280 --> 00:54:04,200
there any object by its address

1085
00:54:04,200 --> 00:54:06,559
similarly in

1086
00:54:06,559 --> 00:54:09,960
memory each place has its address so if

1087
00:54:09,960 --> 00:54:12,680
you want to put anything into that place

1088
00:54:12,680 --> 00:54:15,440
there will be an address for it if you

1089
00:54:15,440 --> 00:54:17,240
want to put any values into those

1090
00:54:17,240 --> 00:54:18,880
addresses you'll have an address for

1091
00:54:18,880 --> 00:54:22,640
that so some parts of

1092
00:54:22,640 --> 00:54:25,920
memory are not for us to use so they'll

1093
00:54:25,920 --> 00:54:28,799
have this wires around them like big

1094
00:54:28,799 --> 00:54:31,599
fences so what can the system store

1095
00:54:31,599 --> 00:54:34,440
there where it doesn't let you ever over

1096
00:54:34,440 --> 00:54:38,559
write on top of it it could be the code

1097
00:54:38,559 --> 00:54:40,480
itself right so if you're writing your

1098
00:54:40,480 --> 00:54:43,000
code your function you probably the

1099
00:54:43,000 --> 00:54:44,520
system will store you in a location

1100
00:54:44,520 --> 00:54:45,960
where you can't access and write

1101
00:54:45,960 --> 00:54:49,480
something on top of that right so that's

1102
00:54:49,480 --> 00:54:52,359
fine so there's another region that we

1103
00:54:52,359 --> 00:54:55,440
have to be aware of and it's right here

1104
00:54:55,440 --> 00:54:57,799
at the coordinates 0.0 so what do you

1105
00:54:57,799 --> 00:55:00,599
think that is have you heard of

1106
00:55:00,599 --> 00:55:03,280
that a null or null

1107
00:55:03,280 --> 00:55:07,000
pointer a zero kind of so we'll use that

1108
00:55:07,000 --> 00:55:09,400
and it's a very useful thing so old way

1109
00:55:09,400 --> 00:55:11,599
of writing it is null and I think our

1110
00:55:11,599 --> 00:55:15,559
code is full of nulls but the newer way

1111
00:55:15,559 --> 00:55:17,440
and it's implemented slightly different

1112
00:55:17,440 --> 00:55:20,520
is to write a null pointer but it's

1113
00:55:20,520 --> 00:55:23,039
essentially for the purposes of today's

1114
00:55:23,039 --> 00:55:25,079
lecture it's the same thing so it points

1115
00:55:25,079 --> 00:55:28,240
to this 0.0 location and think of it as

1116
00:55:28,240 --> 00:55:30,079
there's vacuum there okay so there's

1117
00:55:30,079 --> 00:55:33,680
nothing there you cannot find anything

1118
00:55:33,680 --> 00:55:37,280
there okay getting interesting right now

1119
00:55:37,280 --> 00:55:38,200
there is

1120
00:55:38,200 --> 00:55:40,920
another big piece of memory that is

1121
00:55:40,920 --> 00:55:42,520
called a

1122
00:55:42,520 --> 00:55:46,200
heap and it's called nonpersistent

1123
00:55:46,200 --> 00:55:48,720
memory

1124
00:55:49,920 --> 00:55:52,720
non-persistent so this is a nice memory

1125
00:55:52,720 --> 00:55:55,640
where the system will provide chunks of

1126
00:55:55,640 --> 00:55:58,079
it for you and it will clean it after

1127
00:55:58,079 --> 00:56:00,480
you so it will take care of it you don't

1128
00:56:00,480 --> 00:56:02,440
have to worry about anything stored in

1129
00:56:02,440 --> 00:56:05,000
there because the system will clean it

1130
00:56:05,000 --> 00:56:06,960
now there's another part of the memory

1131
00:56:06,960 --> 00:56:09,359
that is called a

1132
00:56:09,359 --> 00:56:12,039
heap it's bigger than the stack much

1133
00:56:12,039 --> 00:56:14,599
bigger so anything large that you might

1134
00:56:14,599 --> 00:56:16,839
want to store will be stored on Heap

1135
00:56:16,839 --> 00:56:19,920
large objects such as pngs you

1136
00:56:19,920 --> 00:56:23,160
know or

1137
00:56:23,160 --> 00:56:27,359
arrays he oh sorry oh I did I say stack

1138
00:56:27,359 --> 00:56:29,400
here this is

1139
00:56:29,400 --> 00:56:33,200
stack I hope I said

1140
00:56:33,640 --> 00:56:35,839
stack stack so this is stack

1141
00:56:35,839 --> 00:56:38,119
non-persistent so this is clean me

1142
00:56:38,119 --> 00:56:40,640
memory that is non-persistent in the way

1143
00:56:40,640 --> 00:56:42,440
if you put something there it'll not

1144
00:56:42,440 --> 00:56:44,200
stay there the system will take care of

1145
00:56:44,200 --> 00:56:47,559
it but Heap is persistent memory

1146
00:56:47,559 --> 00:56:49,119
persistent

1147
00:56:49,119 --> 00:56:52,559
memory which means that system will

1148
00:56:52,559 --> 00:56:56,240
gladly give you chunks for it but it

1149
00:56:56,240 --> 00:56:58,480
will persist until you clean it up it'll

1150
00:56:58,480 --> 00:57:01,280
stay there and if you don't clean it up

1151
00:57:01,280 --> 00:57:03,720
you can mess it up you can fill it up

1152
00:57:03,720 --> 00:57:05,200
completely and I'll show you by in the

1153
00:57:05,200 --> 00:57:06,640
end of today's lecture how we can

1154
00:57:06,640 --> 00:57:08,400
completely fill it up and there will be

1155
00:57:08,400 --> 00:57:11,240
no space anymore and that means your

1156
00:57:11,240 --> 00:57:14,440
program crashes it used up the whole

1157
00:57:14,440 --> 00:57:17,920
Space so you have to you a lot of time

1158
00:57:17,920 --> 00:57:21,280
in this class you'll spend cleaning Heap

1159
00:57:21,280 --> 00:57:24,280
memory chasing pointers that point to

1160
00:57:24,280 --> 00:57:27,240
that memory and allocate some memory and

1161
00:57:27,240 --> 00:57:29,760
you have to clean it up so that's a a

1162
00:57:29,760 --> 00:57:31,400
lot of frustration is there so let's

1163
00:57:31,400 --> 00:57:34,559
start on what is this pointer

1164
00:57:34,559 --> 00:57:38,000
thing okay so I'm going to so let's

1165
00:57:38,000 --> 00:57:40,119
start with variables because that's what

1166
00:57:40,119 --> 00:57:43,720
you know we'll have we'll occupy memory

1167
00:57:43,720 --> 00:57:46,359
spaces so this is pretty easy we

1168
00:57:46,359 --> 00:57:49,440
declared a variable we talked about it

1169
00:57:49,440 --> 00:57:51,880
and it h every variable has four things

1170
00:57:51,880 --> 00:57:54,480
location name value and type so upon

1171
00:57:54,480 --> 00:57:56,680
this declaration the system will say

1172
00:57:56,680 --> 00:57:59,480
fine it's on stack so I'll give you a

1173
00:57:59,480 --> 00:58:01,119
location for an

1174
00:58:01,119 --> 00:58:05,039
integer say

1175
00:58:05,200 --> 00:58:08,599
A40 that's the memory address of that

1176
00:58:08,599 --> 00:58:12,359
location for the integer value so

1177
00:58:12,359 --> 00:58:15,720
integer type so it's exactly enough for

1178
00:58:15,720 --> 00:58:18,319
the integer type to put the integer

1179
00:58:18,319 --> 00:58:22,680
value inside of it and with name s and

1180
00:58:22,680 --> 00:58:24,839
the value upon this declaration is

1181
00:58:24,839 --> 00:58:26,119
garbage right that's what we call

1182
00:58:26,119 --> 00:58:27,440
garbage because we don't know it's

1183
00:58:27,440 --> 00:58:30,280
whatever was there or whatever default

1184
00:58:30,280 --> 00:58:33,880
value your system decides to give so in

1185
00:58:33,880 --> 00:58:37,319
order to put a value in there you define

1186
00:58:37,319 --> 00:58:40,079
your variable and then five is put into

1187
00:58:40,079 --> 00:58:42,119
that location in

1188
00:58:42,119 --> 00:58:46,720
memory with the address A40 right so

1189
00:58:46,720 --> 00:58:49,680
that's cool similarly for a sphere if

1190
00:58:49,680 --> 00:58:54,319
you decare your user type sphere

1191
00:58:54,319 --> 00:58:57,119
s the system says it's fine it's going

1192
00:58:57,119 --> 00:58:59,680
to be on stack it's nice memory you can

1193
00:58:59,680 --> 00:59:01,319
create it I'll clean it once you're done

1194
00:59:01,319 --> 00:59:02,599
with using

1195
00:59:02,599 --> 00:59:06,079
it and uh I'll give you exactly enough

1196
00:59:06,079 --> 00:59:11,880
memory say in location a A50 right here

1197
00:59:11,880 --> 00:59:14,440
for the variable of type

1198
00:59:14,440 --> 00:59:18,599
sphere with name s and whatever default

1199
00:59:18,599 --> 00:59:20,920
values are there for radius or if

1200
00:59:20,920 --> 00:59:23,400
there's more there may be more values

1201
00:59:23,400 --> 00:59:26,319
for your private me Members whatever uh

1202
00:59:26,319 --> 00:59:28,200
to put

1203
00:59:28,200 --> 00:59:32,799
there okay so that's cool now in C++ you

1204
00:59:32,799 --> 00:59:35,799
can you can have another type of

1205
00:59:35,799 --> 00:59:38,680
variables and they're called pointers

1206
00:59:38,680 --> 00:59:41,280
and you would do something like this if

1207
00:59:41,280 --> 00:59:44,799
you say well I want to have a variable

1208
00:59:44,799 --> 00:59:45,839
on

1209
00:59:45,839 --> 00:59:49,839
stack of type integer pointer and the

1210
00:59:49,839 --> 00:59:52,559
syst would say fine I'll give you this

1211
00:59:52,559 --> 00:59:55,760
variable say at A1 for a variable with

1212
00:59:55,760 --> 00:59:58,680
name Y type integer

1213
00:59:58,680 --> 01:00:03,000
pointer and value should be the memory

1214
01:00:03,000 --> 01:00:06,559
address of a of a integer

1215
01:00:06,559 --> 01:00:09,480
variable so on this picture what could

1216
01:00:09,480 --> 01:00:12,119
be the value of y what is the only

1217
01:00:12,119 --> 01:00:14,319
memory address occupied with an integer

1218
01:00:14,319 --> 01:00:19,359
that we have on this on this um

1219
01:00:19,520 --> 01:00:21,160
picture

1220
01:00:21,160 --> 01:00:23,119
huh

1221
01:00:23,119 --> 01:00:24,960
what

1222
01:00:24,960 --> 01:00:30,000
A1 A40 right so we want to put A40 here

1223
01:00:30,000 --> 01:00:33,079
but I didn't put it yet so far it's just

1224
01:00:33,079 --> 01:00:35,760
given to you with enough space to put an

1225
01:00:35,760 --> 01:00:39,000
address there and in the beginning it's

1226
01:00:39,000 --> 01:00:42,079
occupied by garbage we don't even know

1227
01:00:42,079 --> 01:00:44,280
upon this declaration this value cannot

1228
01:00:44,280 --> 01:00:47,640
be even looking like an address at

1229
01:00:47,640 --> 01:00:51,359
all um but now I want to have an

1230
01:00:51,359 --> 01:00:54,000
assignment I what would be an assignment

1231
01:00:54,000 --> 01:00:57,680
to put that a20 right

1232
01:00:57,680 --> 01:01:00,480
here right so that's the next slide but

1233
01:01:00,480 --> 01:01:02,240
that would

1234
01:01:02,240 --> 01:01:04,799
accomplish defining this variable of

1235
01:01:04,799 --> 01:01:08,160
type poter to integer so that will be

1236
01:01:08,160 --> 01:01:11,960
the next slide so our goal with no

1237
01:01:11,960 --> 01:01:13,960
questions there's a chat question let's

1238
01:01:13,960 --> 01:01:18,200
see A40 yeah very good A40 or was it

1239
01:01:18,200 --> 01:01:21,039
a20 well next slide will

1240
01:01:21,039 --> 01:01:27,240
be yes so a20 not A40 a20 right

1241
01:01:27,240 --> 01:01:29,400
so let's

1242
01:01:29,400 --> 01:01:33,440
see let's see so so far we're good right

1243
01:01:33,440 --> 01:01:37,400
this is your integer variable X this is

1244
01:01:37,400 --> 01:01:40,480
your integer pointer variable P it

1245
01:01:40,480 --> 01:01:42,640
doesn't have a value yet we want to put

1246
01:01:42,640 --> 01:01:44,520
a20

1247
01:01:44,520 --> 01:01:47,520
there so how would I accomplish that

1248
01:01:47,520 --> 01:01:50,319
what do how would I put a20 can I just

1249
01:01:50,319 --> 01:01:52,599
say

1250
01:01:54,359 --> 01:01:56,799
a20 what do you think

1251
01:01:56,799 --> 01:02:00,720
no well first of all you cannot know

1252
01:02:00,720 --> 01:02:03,079
what's that number because it depends on

1253
01:02:03,079 --> 01:02:05,640
what on the execution of program each

1254
01:02:05,640 --> 01:02:08,000
time it can be different it depends on

1255
01:02:08,000 --> 01:02:10,400
operating system on your

1256
01:02:10,400 --> 01:02:13,440
Hardware so even if you knew it in this

1257
01:02:13,440 --> 01:02:16,920
particular execution on your machine you

1258
01:02:16,920 --> 01:02:18,480
still don't want to deal with those hat

1259
01:02:18,480 --> 01:02:20,279
numbers it's a ugly number you'll see

1260
01:02:20,279 --> 01:02:22,160
what pointer is it's an ugly number it's

1261
01:02:22,160 --> 01:02:24,160
a it's a lawn address it's not like

1262
01:02:24,160 --> 01:02:26,039
addresses on neighborhoods actually it's

1263
01:02:26,039 --> 01:02:27,880
worse right so we don't want to do that

1264
01:02:27,880 --> 01:02:31,559
and it changes it's Dynamic so we don't

1265
01:02:31,559 --> 01:02:34,640
want to do that that's bad okay

1266
01:02:34,640 --> 01:02:38,640
good what if I just do

1267
01:02:39,119 --> 01:02:41,520
this you would think that compiler could

1268
01:02:41,520 --> 01:02:43,200
figure out but it will not it'll say

1269
01:02:43,200 --> 01:02:45,319
it'll yell at you it'll say well on the

1270
01:02:45,319 --> 01:02:47,279
right side you have an integer and you

1271
01:02:47,279 --> 01:02:49,319
assign it to an integer pointer it's a

1272
01:02:49,319 --> 01:02:52,760
mismatch of types so compilation error

1273
01:02:52,760 --> 01:02:58,000
compilation error no so for this C++

1274
01:02:58,000 --> 01:03:02,000
uses what's called an

1275
01:03:02,000 --> 01:03:03,720
address

1276
01:03:03,720 --> 01:03:07,480
operator and it's an m perent so what

1277
01:03:07,480 --> 01:03:10,920
you have is you can use an assignment P

1278
01:03:10,920 --> 01:03:13,640
equals an address of

1279
01:03:13,640 --> 01:03:15,920
X so

1280
01:03:15,920 --> 01:03:19,279
this n perent operator returns a

1281
01:03:19,279 --> 01:03:23,240
constant value which is an address a

1282
01:03:23,240 --> 01:03:26,240
constant value and in this case it will

1283
01:03:26,240 --> 01:03:28,599
be a20 but you don't even have to know

1284
01:03:28,599 --> 01:03:32,119
that it's a20 it's an address of app and

1285
01:03:32,119 --> 01:03:36,279
after this operation a20 will be put

1286
01:03:36,279 --> 01:03:40,279
into the value for p so that's really

1287
01:03:40,279 --> 01:03:43,240
cool now I'm I'm going to draw it's very

1288
01:03:43,240 --> 01:03:45,000
important that I don't lose the the

1289
01:03:45,000 --> 01:03:47,599
story line I want to draw something I

1290
01:03:47,599 --> 01:03:49,480
want to draw how it looks

1291
01:03:49,480 --> 01:03:51,400
like

1292
01:03:51,400 --> 01:03:54,720
okay so I want to draw what this

1293
01:03:54,720 --> 01:03:57,640
assignment would accomplish so that next

1294
01:03:57,640 --> 01:04:00,319
when I chase pointers I have the same

1295
01:04:00,319 --> 01:04:02,760
way of drawing things so that it's easy

1296
01:04:02,760 --> 01:04:05,920
to debug things so when I draw this on

1297
01:04:05,920 --> 01:04:07,760
stack I have

1298
01:04:07,760 --> 01:04:11,880
X of type integer so I keep integers

1299
01:04:11,880 --> 01:04:17,480
with value five and I have a variable P

1300
01:04:17,480 --> 01:04:21,520
upon this declaration of type pointer so

1301
01:04:21,520 --> 01:04:24,240
I put a dot there and I just have to

1302
01:04:24,240 --> 01:04:27,079
remember that it it's integer pointer

1303
01:04:27,079 --> 01:04:31,000
type and after this assignment this

1304
01:04:31,000 --> 01:04:33,559
pointer points to

1305
01:04:33,559 --> 01:04:37,440
X so you kind of if you were able to

1306
01:04:37,440 --> 01:04:41,480
follow the pointer you could use that as

1307
01:04:41,480 --> 01:04:43,160
if it was

1308
01:04:43,160 --> 01:04:46,760
X so do you feel like there should be

1309
01:04:46,760 --> 01:04:49,480
some then way of following the poter

1310
01:04:49,480 --> 01:04:51,200
otherwise why would I have this point in

1311
01:04:51,200 --> 01:04:53,720
the first place so yes that's the next

1312
01:04:53,720 --> 01:04:55,359
operator that we are going to use and

1313
01:04:55,359 --> 01:04:59,520
it's called du reference du reference

1314
01:04:59,520 --> 01:05:02,720
operator and it's an

1315
01:05:02,720 --> 01:05:08,720
asterisk so if you say d reference

1316
01:05:08,720 --> 01:05:12,119
P the result of it is kind of like the

1317
01:05:12,119 --> 01:05:14,279
reverse of address except that it's not

1318
01:05:14,279 --> 01:05:17,760
a constant it's a variable that is

1319
01:05:17,760 --> 01:05:22,839
stored in the value of P so this de

1320
01:05:22,839 --> 01:05:24,480
reference operator will look at the

1321
01:05:24,480 --> 01:05:26,640
value of P go to the that address and

1322
01:05:26,640 --> 01:05:29,839
Returns the variable stored there so

1323
01:05:29,839 --> 01:05:32,400
essentially it's an X and then you can

1324
01:05:32,400 --> 01:05:37,880
say equal to 10 and upon this line the

1325
01:05:37,880 --> 01:05:40,760
system would go and write 10 in the

1326
01:05:40,760 --> 01:05:43,240
value of

1327
01:05:43,720 --> 01:05:45,319
x

1328
01:05:45,319 --> 01:05:50,319
okay so the return of this operator is a

1329
01:05:50,720 --> 01:05:56,319
variable at P's address value or at P's

1330
01:05:56,319 --> 01:05:59,920
value right the value is the address so

1331
01:05:59,920 --> 01:06:02,559
at P's

1332
01:06:04,680 --> 01:06:10,279
value okay so is this clear is this

1333
01:06:10,279 --> 01:06:12,960
good now we're going to start playing

1334
01:06:12,960 --> 01:06:15,319
with this

1335
01:06:16,760 --> 01:06:18,839
pointers

1336
01:06:18,839 --> 01:06:21,160
um

1337
01:06:21,160 --> 01:06:24,160
so so that's kind of contrived right why

1338
01:06:24,160 --> 01:06:27,880
would I have a pointer to a variable on

1339
01:06:27,880 --> 01:06:30,760
stack if I have X I can change X

1340
01:06:30,760 --> 01:06:33,720
directly right so there's one more

1341
01:06:33,720 --> 01:06:36,680
mechanism in C++ that will give you

1342
01:06:36,680 --> 01:06:38,680
access to Heap memory so if you want

1343
01:06:38,680 --> 01:06:40,640
your HEAP memory which is this large

1344
01:06:40,640 --> 01:06:43,520
chunk that you can use for large objects

1345
01:06:43,520 --> 01:06:45,039
then it turns out that you can only

1346
01:06:45,039 --> 01:06:47,119
access them through point that through

1347
01:06:47,119 --> 01:06:50,119
pointers and those chance of memory will

1348
01:06:50,119 --> 01:06:53,160
never have a name that is really really

1349
01:06:53,160 --> 01:06:55,559
interesting thing so the chance of

1350
01:06:55,559 --> 01:06:58,240
memory that will be given for you on

1351
01:06:58,240 --> 01:07:01,400
Heap will never have a name they'll only

1352
01:07:01,400 --> 01:07:03,680
have

1353
01:07:03,799 --> 01:07:06,799
pointers and how do you ask your system

1354
01:07:06,799 --> 01:07:09,319
to give you that so let's start with

1355
01:07:09,319 --> 01:07:10,839
just declaring

1356
01:07:10,839 --> 01:07:15,279
p and then p is on stack it has

1357
01:07:15,279 --> 01:07:19,559
integer uh pointer type it has location

1358
01:07:19,559 --> 01:07:22,799
it has some garbage value for now but

1359
01:07:22,799 --> 01:07:25,720
you want the value to be addressed on

1360
01:07:25,720 --> 01:07:28,240
heat memory so you want that heat memory

1361
01:07:28,240 --> 01:07:30,799
now so then you ask the system through

1362
01:07:30,799 --> 01:07:35,000
this statement new integer to give you

1363
01:07:35,000 --> 01:07:38,720
that so new int when the system sees new

1364
01:07:38,720 --> 01:07:41,000
int it will

1365
01:07:41,000 --> 01:07:45,960
create an address say B 20

1366
01:07:45,960 --> 01:07:50,039
now on Heap which will never have a name

1367
01:07:50,039 --> 01:07:52,039
which type will be

1368
01:07:52,039 --> 01:07:54,559
integer and no value at this point

1369
01:07:54,559 --> 01:07:56,279
whatever was there

1370
01:07:56,279 --> 01:07:58,599
and through this assignment

1371
01:07:58,599 --> 01:08:01,960
operator it will give that address to p

1372
01:08:01,960 --> 01:08:08,279
as a value so your P has value

1373
01:08:08,279 --> 01:08:11,359
B20 so in a picture then you would have

1374
01:08:11,359 --> 01:08:14,319
your stack and you would have your HEAP

1375
01:08:14,319 --> 01:08:17,359
and originally upon first declaration

1376
01:08:17,359 --> 01:08:20,479
your P would be a pointer pointing to

1377
01:08:20,479 --> 01:08:23,479
limbo of some sort at this point garbage

1378
01:08:23,479 --> 01:08:26,279
but of type integer pointer

1379
01:08:26,279 --> 01:08:29,000
and then new int would create your

1380
01:08:29,000 --> 01:08:33,040
integer on the Heap with no name so

1381
01:08:33,040 --> 01:08:36,520
there's no other way to refer to it but

1382
01:08:36,520 --> 01:08:38,920
through this assignment so this address

1383
01:08:38,920 --> 01:08:41,839
was assigned to p and that's your hold

1384
01:08:41,839 --> 01:08:44,839
to that memory so now you can see that

1385
01:08:44,839 --> 01:08:46,238
there's a problem right who's going to

1386
01:08:46,238 --> 01:08:50,520
clean it up what if the program stops

1387
01:08:50,520 --> 01:08:52,799
execution and P is clear out for the

1388
01:08:52,799 --> 01:08:55,920
memory and you pointer to that memory on

1389
01:08:55,920 --> 01:08:58,040
the Heap is

1390
01:08:58,040 --> 01:09:01,120
still left out and you have what's

1391
01:09:01,120 --> 01:09:02,920
called a memory leak so we'll go through

1392
01:09:02,920 --> 01:09:05,520
that later through examples but you have

1393
01:09:05,520 --> 01:09:07,600
to be very careful whenever you ask for

1394
01:09:07,600 --> 01:09:09,439
memory from the system you'll have to

1395
01:09:09,439 --> 01:09:14,319
use what we call delete delete p in the

1396
01:09:14,319 --> 01:09:18,399
end that will delete this memory clear

1397
01:09:18,399 --> 01:09:19,600
it

1398
01:09:19,600 --> 01:09:22,960
out release it to F for further use

1399
01:09:22,960 --> 01:09:25,000
otherwise it's locked and never be

1400
01:09:25,000 --> 01:09:27,880
touched until you call delete P this is

1401
01:09:27,880 --> 01:09:30,679
very important if you ask for new there

1402
01:09:30,679 --> 01:09:32,560
should be the same number of news and

1403
01:09:32,560 --> 01:09:34,799
deletes in your program so that you

1404
01:09:34,799 --> 01:09:36,439
don't have a

1405
01:09:36,439 --> 01:09:40,040
memory okay but now what I can do is I

1406
01:09:40,040 --> 01:09:42,759
can say so let's not delete P let's work

1407
01:09:42,759 --> 01:09:44,520
with P for a little bit so I'll remove

1408
01:09:44,520 --> 01:09:46,560
that to just point out that you'll have

1409
01:09:46,560 --> 01:09:48,399
to do that eventually in the end of your

1410
01:09:48,399 --> 01:09:51,799
program but if I so far still want to

1411
01:09:51,799 --> 01:09:53,880
work with this memory and Heap I can

1412
01:09:53,880 --> 01:09:57,600
access it through p i reference it and

1413
01:09:57,600 --> 01:09:59,920
assign value five in there and then the

1414
01:09:59,920 --> 01:10:02,360
system will follow the pointer and put

1415
01:10:02,360 --> 01:10:06,000
five in the value of that integer on the

1416
01:10:06,000 --> 01:10:11,159
heat okay okay so now I I talk too much

1417
01:10:11,159 --> 01:10:14,080
I want you to ask to to think about

1418
01:10:14,080 --> 01:10:18,520
what's going to happen in this little

1419
01:10:18,520 --> 01:10:21,640
program so for you to spec speculate and

1420
01:10:21,640 --> 01:10:23,719
I have a question

1421
01:10:23,719 --> 01:10:26,719
on here

1422
01:10:26,719 --> 01:10:28,920
so what happens after compiling and

1423
01:10:28,920 --> 01:10:31,600
running this

1424
01:10:31,880 --> 01:10:35,679
code so think about it a little

1425
01:10:35,679 --> 01:10:39,600
bit and I I think I want to have it so

1426
01:10:39,600 --> 01:10:42,600
I'm going to open my program hold on you

1427
01:10:42,600 --> 01:10:45,520
can think about it but I'll work

1428
01:10:45,520 --> 01:10:47,840
here and have a second

1429
01:10:47,840 --> 01:10:49,920
screen think about it you have it on

1430
01:10:49,920 --> 01:10:51,960
your

1431
01:10:51,960 --> 01:10:57,239
um on your print outs

1432
01:10:59,360 --> 01:11:01,080
let's see if oh people already answered

1433
01:11:01,080 --> 01:11:03,640
compilation error runtime error fine let

1434
01:11:03,640 --> 01:11:07,159
me grab it because I have

1435
01:11:11,120 --> 01:11:14,800
meain what's what's that program

1436
01:11:14,800 --> 01:11:18,159
yeah so let's uh comment out that

1437
01:11:18,159 --> 01:11:20,440
because we'll need that

1438
01:11:20,440 --> 01:11:23,040
later I'm commenting out the code so you

1439
01:11:23,040 --> 01:11:25,360
can see that this is the Syntax for

1440
01:11:25,360 --> 01:11:28,159
commenting out big chance of code

1441
01:11:28,159 --> 01:11:29,679
integers

1442
01:11:29,679 --> 01:11:33,120
p and I reference p and I just want to

1443
01:11:33,120 --> 01:11:37,520
put 37 there right so we'll run that

1444
01:11:37,520 --> 01:11:40,960
let's go back to this compilation

1445
01:11:40,960 --> 01:11:44,600
Arrow run time

1446
01:11:47,920 --> 01:11:51,480
Arrow so compil compilation error is

1447
01:11:51,480 --> 01:11:53,199
some is usually when there is wrong

1448
01:11:53,199 --> 01:11:55,679
syntax so is there anything wrong with

1449
01:11:55,679 --> 01:11:58,239
the sentence mismatch types or anything

1450
01:11:58,239 --> 01:11:59,520
I declare

1451
01:11:59,520 --> 01:12:02,520
P it's on stack it's an integer pointer

1452
01:12:02,520 --> 01:12:06,239
I follow that pointer and give 37 value

1453
01:12:06,239 --> 01:12:08,239
to that location in

1454
01:12:08,239 --> 01:12:12,519
memory what's that location in

1455
01:12:15,320 --> 01:12:18,480
memory whatever was that garbage it

1456
01:12:18,480 --> 01:12:20,639
cannot be even it may not be even a

1457
01:12:20,639 --> 01:12:23,280
memory address it cannot be even

1458
01:12:23,280 --> 01:12:26,880
interpreted maybe yeah so

1459
01:12:26,880 --> 01:12:30,239
so let's run and compile my program it

1460
01:12:30,239 --> 01:12:32,760
does exactly that right let's see what

1461
01:12:32,760 --> 01:12:39,040
happens so it's um g++ main I think main

1462
01:12:39,040 --> 01:12:40,679
CP

1463
01:12:40,679 --> 01:12:43,000
ah oh sorry I'm in the sphere I didn't

1464
01:12:43,000 --> 01:12:45,880
want the G+ I want to go

1465
01:12:45,880 --> 01:12:49,440
out so

1466
01:12:49,440 --> 01:12:53,159
g++ okay so no compilation Arrow that's

1467
01:12:53,159 --> 01:12:56,600
fine and a out

1468
01:12:56,600 --> 01:12:59,800
ouch segmentation

1469
01:13:00,679 --> 01:13:03,000
fault what is segmentation fault so I

1470
01:13:03,000 --> 01:13:04,960
want to show this just to lighten the

1471
01:13:04,960 --> 01:13:09,480
mood let's watch this little

1472
01:13:13,679 --> 01:13:17,760
video that describes

1473
01:13:18,840 --> 01:13:22,000
pointers uh

1474
01:13:24,120 --> 01:13:27,120
oh

1475
01:13:34,840 --> 01:13:36,159
started I guess we're going to need a

1476
01:13:36,159 --> 01:13:39,320
couple pointers okay this code allocates

1477
01:13:39,320 --> 01:13:42,080
two pointers which can point the integ

1478
01:13:42,080 --> 01:13:44,280
okay well I see the two pointers but

1479
01:13:44,280 --> 01:13:45,400
they don't seem to be pointing to

1480
01:13:45,400 --> 01:13:47,639
anything that's right initially pointers

1481
01:13:47,639 --> 01:13:49,440
don't point to anything things they

1482
01:13:49,440 --> 01:13:51,560
point to are called Pointes and setting

1483
01:13:51,560 --> 01:13:54,000
them up to separate step oh right right

1484
01:13:54,000 --> 01:13:57,320
I knew that point are separate so how do

1485
01:13:57,320 --> 01:13:58,880
you

1486
01:13:58,880 --> 01:14:01,340
allocate

1487
01:14:01,340 --> 01:14:02,880
[Music]

1488
01:14:02,880 --> 01:14:07,920
well code oh my God sorry they're too

1489
01:14:07,920 --> 01:14:12,480
equivalent I I pulled out wrong

1490
01:14:24,040 --> 01:14:27,040
YouTube

1491
01:14:28,239 --> 01:14:31,000
look there it goes so doing a d

1492
01:14:31,000 --> 01:14:33,520
reference on X follows the arrow to

1493
01:14:33,520 --> 01:14:35,120
access

1494
01:14:35,120 --> 01:14:38,320
it in there hey try using it to store

1495
01:14:38,320 --> 01:14:40,719
the number 13 through the other point

1496
01:14:40,719 --> 01:14:45,080
why okay I'll just go over here to Y and

1497
01:14:45,080 --> 01:14:47,840
get the number 13 set up and then take

1498
01:14:47,840 --> 01:14:51,719
the one of G referencing and

1499
01:14:51,719 --> 01:14:54,000
just oh hey

1500
01:14:54,000 --> 01:14:57,600
that's say I don't think D referencing Y

1501
01:14:57,600 --> 01:14:59,719
is a good idea because uh you know

1502
01:14:59,719 --> 01:15:01,360
setting up the point e is a separate

1503
01:15:01,360 --> 01:15:04,600
step and I don't think we ever did it

1504
01:15:04,600 --> 01:15:07,760
Point yeah we we allocated the pointer y

1505
01:15:07,760 --> 01:15:11,040
but we never set it to point to a point

1506
01:15:11,040 --> 01:15:15,239
D just like in this code

1507
01:15:16,800 --> 01:15:20,520
right iuse pointer

1508
01:15:20,520 --> 01:15:23,719
assignment problem no this doesn't touch

1509
01:15:23,719 --> 01:15:27,560
the point it just one pointer the same

1510
01:15:27,560 --> 01:15:29,920
just the

1511
01:15:31,080 --> 01:15:34,239
value so wait now Y is fixed it has a

1512
01:15:34,239 --> 01:15:36,120
point so you can try the one of do

1513
01:15:36,120 --> 01:15:38,679
referencing again to to the

1514
01:15:38,679 --> 01:15:42,480
130 okay here it

1515
01:15:42,480 --> 01:15:45,239
goes referencing works on why because

1516
01:15:45,239 --> 01:15:46,800
the pointers are sharing that one point

1517
01:15:46,800 --> 01:15:51,840
e they both see the 13 yeah sure okay so

1518
01:15:51,840 --> 01:15:55,159
this is a very similar problem right we

1519
01:15:55,159 --> 01:15:57,880
have these initial ones pointing to

1520
01:15:57,880 --> 01:16:01,480
garbage and that was segmentation fault

1521
01:16:01,480 --> 01:16:03,760
in our

1522
01:16:03,760 --> 01:16:06,360
execution but it could be something else

1523
01:16:06,360 --> 01:16:08,679
so I actually tried this little program

1524
01:16:08,679 --> 01:16:12,920
here today I was running it on my um PC

1525
01:16:12,920 --> 01:16:15,719
at home and it actually didn't give

1526
01:16:15,719 --> 01:16:18,040
segmentation fault it actually had that

1527
01:16:18,040 --> 01:16:21,280
that value the original value on that

1528
01:16:21,280 --> 01:16:23,560
hardware and on that operating system

1529
01:16:23,560 --> 01:16:28,400
had was interpreted as an address and it

1530
01:16:28,400 --> 01:16:31,719
gave uh it just it run it it worked

1531
01:16:31,719 --> 01:16:33,360
perfectly perfectly fine it just

1532
01:16:33,360 --> 01:16:35,480
assigned that value to that address that

1533
01:16:35,480 --> 01:16:38,320
I don't even know is which is really bad

1534
01:16:38,320 --> 01:16:40,560
so writing this kind of code can lead to

1535
01:16:40,560 --> 01:16:44,239
a lot of problems because you may put 37

1536
01:16:44,239 --> 01:16:46,400
in some place on your system where

1537
01:16:46,400 --> 01:16:49,679
you're not supposed to have access to at

1538
01:16:49,679 --> 01:16:53,679
all that's a way to break your system so

1539
01:16:53,679 --> 01:16:57,040
um what what this is called is Insidious

1540
01:16:57,040 --> 01:16:59,560
bug a bug that is very hard to find

1541
01:16:59,560 --> 01:17:01,719
because it could be a runtime error like

1542
01:17:01,719 --> 01:17:02,840
segmentation

1543
01:17:02,840 --> 01:17:06,520
Falls and your binky breaks apart but it

1544
01:17:06,520 --> 01:17:08,840
could be that everything seems fine but

1545
01:17:08,840 --> 01:17:11,920
it's not so that's kind of a

1546
01:17:11,920 --> 01:17:14,719
problem okay and this was for C so

1547
01:17:14,719 --> 01:17:17,760
instead of Malo we use new integer here

1548
01:17:17,760 --> 01:17:19,320
for those of you who are familiar with

1549
01:17:19,320 --> 01:17:22,320
see so I'll I'll I'll fix the slide and

1550
01:17:22,320 --> 01:17:26,480
put the C++ version off the same

1551
01:17:26,480 --> 01:17:29,400
video okay so the correct answer would

1552
01:17:29,400 --> 01:17:31,800
be runtime error here here not

1553
01:17:31,800 --> 01:17:34,800
compilation error run time

1554
01:17:34,800 --> 01:17:37,280
error

1555
01:17:37,280 --> 01:17:41,000
um well well yeah yeah or it could run

1556
01:17:41,000 --> 01:17:43,239
so or other other is a good answer

1557
01:17:43,239 --> 01:17:45,880
because it could that it's runtime error

1558
01:17:45,880 --> 01:17:47,199
on this particular example that I

1559
01:17:47,199 --> 01:17:49,199
demonstrated was SE fault but it could

1560
01:17:49,199 --> 01:17:52,600
be that it just runs fine but it's a

1561
01:17:52,600 --> 01:17:55,920
memory problem it's an inid is bug so it

1562
01:17:55,920 --> 01:17:56,920
has a

1563
01:17:56,920 --> 01:17:58,960
bug

1564
01:17:58,960 --> 01:18:01,760
okay uh why when should you use Heap

1565
01:18:01,760 --> 01:18:04,840
memory instead of Stack memory so uh

1566
01:18:04,840 --> 01:18:08,320
anytime you want your objects

1567
01:18:08,320 --> 01:18:11,880
persist so for example in your lab intro

1568
01:18:11,880 --> 01:18:15,239
you'll need to use pointers to

1569
01:18:15,239 --> 01:18:17,840
individual pixels and we use pointers to

1570
01:18:17,840 --> 01:18:19,679
individual pixels because as you pass

1571
01:18:19,679 --> 01:18:22,159
around this objects pngs from function

1572
01:18:22,159 --> 01:18:23,159
to

1573
01:18:23,159 --> 01:18:27,080
function that memory should stay put and

1574
01:18:27,080 --> 01:18:29,159
persistent because you want to modify

1575
01:18:29,159 --> 01:18:32,239
your PNG so that's why you will have to

1576
01:18:32,239 --> 01:18:34,520
access it through the referencing not

1577
01:18:34,520 --> 01:18:38,560
through dot to access the members of the

1578
01:18:38,560 --> 01:18:41,920
uh PNG class if I'm not mistaken so

1579
01:18:41,920 --> 01:18:44,080
that's that's one so whenever you you're

1580
01:18:44,080 --> 01:18:46,639
dealing with big chance of memory that

1581
01:18:46,639 --> 01:18:47,920
you pass around between different

1582
01:18:47,920 --> 01:18:50,320
functions to work and and modify them

1583
01:18:50,320 --> 01:18:53,040
that's when you need it so arrays can be

1584
01:18:53,040 --> 01:18:55,520
implemented in that way large arrays can

1585
01:18:55,520 --> 01:18:59,639
be implemented as um as memory chunks or

1586
01:18:59,639 --> 01:19:00,920
keep memory

1587
01:19:00,920 --> 01:19:03,719
chunks

1588
01:19:03,719 --> 01:19:07,840
okay yeah yes you lose your head or

1589
01:19:07,840 --> 01:19:11,520
Minds trying to figure out uh where you

1590
01:19:11,520 --> 01:19:14,320
do reference WR right okay so now a

1591
01:19:14,320 --> 01:19:16,719
little more fun so from now on we have

1592
01:19:16,719 --> 01:19:18,920
15 minutes today just to have fun with

1593
01:19:18,920 --> 01:19:21,239
this things so I'll be just asking you

1594
01:19:21,239 --> 01:19:22,159
what's the

1595
01:19:22,159 --> 01:19:25,480
output and uh

1596
01:19:25,480 --> 01:19:28,920
so yeah here let's start with this first

1597
01:19:28,920 --> 01:19:30,960
line what is the output and please put

1598
01:19:30,960 --> 01:19:32,560
your answers for those of you who are

1599
01:19:32,560 --> 01:19:36,159
online in the Q&A and then L see but you

1600
01:19:36,159 --> 01:19:37,679
guys just tell me what will be the

1601
01:19:37,679 --> 01:19:40,199
output

1602
01:19:40,440 --> 01:19:43,120
here and I can start drawing while

1603
01:19:43,120 --> 01:19:45,840
you're thinking because we will have

1604
01:19:45,840 --> 01:19:48,120
this picture then of what's going on on

1605
01:19:48,120 --> 01:19:53,360
stack on Heap so first we declare p p

1606
01:19:53,360 --> 01:19:56,480
and Q

1607
01:19:56,480 --> 01:19:59,800
then we ask for new Heap memory for p

1608
01:19:59,800 --> 01:20:03,880
and assign it to P so we have this

1609
01:20:03,880 --> 01:20:07,719
situation then we say Q value what is

1610
01:20:07,719 --> 01:20:11,120
the value of Q the address that is saved

1611
01:20:11,120 --> 01:20:13,320
there on the stack should be the same as

1612
01:20:13,320 --> 01:20:15,800
the value for p which means that they

1613
01:20:15,800 --> 01:20:17,920
point to the same thing the values that

1614
01:20:17,920 --> 01:20:20,000
they sort the addresses are the same

1615
01:20:20,000 --> 01:20:22,280
cool so that's the picture then I do

1616
01:20:22,280 --> 01:20:23,400
reference

1617
01:20:23,400 --> 01:20:25,400
q and

1618
01:20:25,400 --> 01:20:27,960
the an the return is the variable stored

1619
01:20:27,960 --> 01:20:30,000
at that location so this variable with

1620
01:20:30,000 --> 01:20:33,080
no name should have the value

1621
01:20:33,080 --> 01:20:37,679
eight so now if you want to print out P

1622
01:20:37,679 --> 01:20:39,920
what will be the print

1623
01:20:39,920 --> 01:20:43,639
out let's see if those guys

1624
01:20:43,639 --> 01:20:45,280
answered

1625
01:20:45,280 --> 01:20:48,960
no it was eight yes also there's a

1626
01:20:48,960 --> 01:20:51,239
memory Le yeah very good so they went

1627
01:20:51,239 --> 01:20:54,440
ahead so yeah the output of p is eight

1628
01:20:54,440 --> 01:20:57,719
so so eight is good now I say okay so

1629
01:20:57,719 --> 01:21:01,520
the next step Q I asked for new chunk of

1630
01:21:01,520 --> 01:21:05,400
Heap memory for Q as well so I say Q now

1631
01:21:05,400 --> 01:21:08,679
reassign so the system first will create

1632
01:21:08,679 --> 01:21:12,880
a new Heap uh variable of type integer

1633
01:21:12,880 --> 01:21:15,800
and we'll assign it to Q so Q will now

1634
01:21:15,800 --> 01:21:19,120
point there that's cool now I do

1635
01:21:19,120 --> 01:21:23,120
reference q and assign to that variable

1636
01:21:23,120 --> 01:21:26,040
on the he value nine that's all okay we

1637
01:21:26,040 --> 01:21:28,880
did reference after we ask for memory

1638
01:21:28,880 --> 01:21:32,159
and now I say p equals to null remember

1639
01:21:32,159 --> 01:21:35,159
null that address that is very special

1640
01:21:35,159 --> 01:21:39,440
0.0 so I say p instead of having the

1641
01:21:39,440 --> 01:21:43,199
value of this variable address I give it

1642
01:21:43,199 --> 01:21:45,519
to

1643
01:21:45,960 --> 01:21:49,159
null so what happens

1644
01:21:49,159 --> 01:21:53,280
Ah that's a memory Le yes oops never

1645
01:21:53,280 --> 01:21:57,239
mind let me see see yeah okay one answer

1646
01:21:57,239 --> 01:21:59,639
yeah memory leak so this is memory

1647
01:21:59,639 --> 01:22:04,560
leak we don't like it it's a Memory

1648
01:22:04,600 --> 01:22:08,199
leak so that let's define memory leaks

1649
01:22:08,199 --> 01:22:11,040
so this is a this memory leak

1650
01:22:11,040 --> 01:22:13,360
occurs when

1651
01:22:13,360 --> 01:22:16,360
all

1652
01:22:16,800 --> 01:22:20,760
pointers to Heap

1653
01:22:21,440 --> 01:22:23,719
memory well here you can say different

1654
01:22:23,719 --> 01:22:25,280
things you can say

1655
01:22:25,280 --> 01:22:27,639
they go out of scope or they're removed

1656
01:22:27,639 --> 01:22:30,000
or they're reassigned so let's say are

1657
01:22:30,000 --> 01:22:33,920
removed in some way

1658
01:22:34,040 --> 01:22:36,560
removed right so nothing points to that

1659
01:22:36,560 --> 01:22:39,199
heat memory so that's called uh memory

1660
01:22:39,199 --> 01:22:42,080
leak how do you fix it so how what

1661
01:22:42,080 --> 01:22:45,440
should I do first here I should fix it

1662
01:22:45,440 --> 01:22:48,000
with delete statement right so if I said

1663
01:22:48,000 --> 01:22:53,199
delete q p if I first ask for delete P

1664
01:22:53,199 --> 01:22:55,480
so to fix it to

1665
01:22:55,480 --> 01:22:57,560
F

1666
01:22:57,560 --> 01:23:01,199
first first

1667
01:23:01,199 --> 01:23:06,080
delete B so do this if I did that then

1668
01:23:06,080 --> 01:23:08,040
there would be no memory because first I

1669
01:23:08,040 --> 01:23:10,719
would ask to delete this P

1670
01:23:10,719 --> 01:23:13,400
value and then I would put P to no

1671
01:23:13,400 --> 01:23:16,280
that's cool so now I say let's use

1672
01:23:16,280 --> 01:23:20,600
another color orange delete Q so I say

1673
01:23:20,600 --> 01:23:24,600
take this memory and free it so that now

1674
01:23:24,600 --> 01:23:26,280
can be relocated to other pointers or

1675
01:23:26,280 --> 01:23:28,840
whatever I needed and then I say Q

1676
01:23:28,840 --> 01:23:33,040
equals to null so reassign Q to null as

1677
01:23:33,040 --> 01:23:37,440
well or n pointer then I did everything

1678
01:23:37,440 --> 01:23:38,560
right for

1679
01:23:38,560 --> 01:23:43,400
Q no so Q is good

1680
01:23:43,400 --> 01:23:47,080
okay ah so there's other things if you

1681
01:23:47,080 --> 01:23:50,440
try to delete a pointer that is already

1682
01:23:50,440 --> 01:23:54,719
null but um deleting a null pointer is

1683
01:23:54,719 --> 01:23:56,520
totally fine and that's very good

1684
01:23:56,520 --> 01:23:58,440
because then putting something and

1685
01:23:58,440 --> 01:24:01,880
storing null there in the pointer will

1686
01:24:01,880 --> 01:24:04,159
have a Define behavior later so you can

1687
01:24:04,159 --> 01:24:06,199
always check oh if it's null or not null

1688
01:24:06,199 --> 01:24:08,800
and you can delete it anyway but the

1689
01:24:08,800 --> 01:24:10,679
reference in a null pointer so here it's

1690
01:24:10,679 --> 01:24:13,639
also nice so you should always always

1691
01:24:13,639 --> 01:24:17,679
after deleting memory save null into

1692
01:24:17,679 --> 01:24:20,320
those variables because after that the

1693
01:24:20,320 --> 01:24:22,040
reference in that variable will be a

1694
01:24:22,040 --> 01:24:24,159
problem if you D reference something

1695
01:24:24,159 --> 01:24:27,159
that is a garbage then that's an ins

1696
01:24:27,159 --> 01:24:28,840
serious bug but if you do reference a

1697
01:24:28,840 --> 01:24:31,320
null pointer then it's a SE fault and

1698
01:24:31,320 --> 01:24:33,400
it's a defined Behavior so that's very

1699
01:24:33,400 --> 01:24:36,960
good okay um okay so let's practice

1700
01:24:36,960 --> 01:24:40,960
these points on examples now better okay

1701
01:24:40,960 --> 01:24:44,960
very good uh I'm going to go through the

1702
01:24:44,960 --> 01:24:49,600
example of I have very few very little

1703
01:24:49,600 --> 01:24:52,199
time so I'm going to go through this

1704
01:24:52,199 --> 01:24:55,119
example okay I think you have it on your

1705
01:24:55,119 --> 01:24:57,719
printouts so look at this Snippets of

1706
01:24:57,719 --> 01:25:01,800
code and tell me which ones have

1707
01:25:01,800 --> 01:25:05,560
bugs and which ones

1708
01:25:06,719 --> 01:25:09,880
don't and you guys will have to answer

1709
01:25:09,880 --> 01:25:12,880
here

1710
01:25:14,000 --> 01:25:19,800
um so look at the code first and let's

1711
01:25:20,480 --> 01:25:22,760
see and why don't you talk to each other

1712
01:25:22,760 --> 01:25:26,639
now so you can just you know figure

1713
01:25:26,639 --> 01:25:30,560
out and you'll finish with

1714
01:25:35,940 --> 01:25:38,978
[Music]

1715
01:25:53,239 --> 01:25:56,239
this

1716
01:26:05,239 --> 01:26:08,799
I will prepare some code in the

1717
01:26:23,239 --> 01:26:26,239
meantime

1718
01:26:53,239 --> 01:26:56,239
what

1719
01:27:01,550 --> 01:27:04,689
[Music]

1720
01:27:16,119 --> 01:27:19,519
well doesn't matter

1721
01:27:23,119 --> 01:27:27,320
okay let's see the

1722
01:27:45,719 --> 01:27:49,400
answers so what about number one did you

1723
01:27:49,400 --> 01:27:52,440
guys figure out is that okay I think

1724
01:27:52,440 --> 01:27:54,000
it's just something that we something we

1725
01:27:54,000 --> 01:27:56,880
just just already covered and that had a

1726
01:27:56,880 --> 01:27:59,560
what a memory leak so this is memory

1727
01:27:59,560 --> 01:28:02,920
leak we already

1728
01:28:05,719 --> 01:28:09,960
know what about number

1729
01:28:14,040 --> 01:28:16,040
two let's

1730
01:28:16,040 --> 01:28:20,199
see stack keep and tell me if I'm doing

1731
01:28:20,199 --> 01:28:23,119
something wrong p

1732
01:28:23,119 --> 01:28:26,880
q p is new

1733
01:28:26,880 --> 01:28:29,520
integer Q is

1734
01:28:29,520 --> 01:28:35,199
p follow Q put 8 delete

1735
01:28:35,600 --> 01:28:39,639
Q fine good remember I says always put

1736
01:28:39,639 --> 01:28:42,360
null then if you delete because

1737
01:28:42,360 --> 01:28:46,119
otherwise what are the values at Q's

1738
01:28:46,119 --> 01:28:49,880
left so when you say delete this memory

1739
01:28:49,880 --> 01:28:53,760
the Heap memory is cleared out but p and

1740
01:28:53,760 --> 01:28:55,840
Q are not changed they still have the

1741
01:28:55,840 --> 01:28:59,760
address to that memory that's now not

1742
01:28:59,760 --> 01:29:01,840
theirs and may be used for something

1743
01:29:01,840 --> 01:29:05,080
else so then if you de reference Q de

1744
01:29:05,080 --> 01:29:09,000
reference P you may go to the same

1745
01:29:09,000 --> 01:29:12,440
location and put the value 12

1746
01:29:12,440 --> 01:29:16,280
there and that means many things can go

1747
01:29:16,280 --> 01:29:19,600
wrong it could be runtime errow it could

1748
01:29:19,600 --> 01:29:22,600
be that it will be just fine and you'll

1749
01:29:22,600 --> 01:29:25,000
just put some values in the location

1750
01:29:25,000 --> 01:29:26,760
that doesn't belong to you and belongs

1751
01:29:26,760 --> 01:29:29,320
to maybe some other variable that you

1752
01:29:29,320 --> 01:29:32,400
your program has and then you don't know

1753
01:29:32,400 --> 01:29:34,080
why you print out that variable and it

1754
01:29:34,080 --> 01:29:37,960
gives you 12 or something like that so

1755
01:29:37,960 --> 01:29:40,800
um I have a snippet of code here that's

1756
01:29:40,800 --> 01:29:43,840
exactly what it is look I deleted p and

1757
01:29:43,840 --> 01:29:47,280
I want to De reference p and Q after

1758
01:29:47,280 --> 01:29:49,440
deletion and see what's there in that

1759
01:29:49,440 --> 01:29:51,360
cleared out memory

1760
01:29:51,360 --> 01:29:53,760
right and that should be what if the

1761
01:29:53,760 --> 01:29:55,920
system cleaned it up cleaned it up it

1762
01:29:55,920 --> 01:29:58,920
puts some something there but then I'll

1763
01:29:58,920 --> 01:30:01,600
follow that address that is cleared and

1764
01:30:01,600 --> 01:30:04,000
we'll try to then do reference and go

1765
01:30:04,000 --> 01:30:05,760
there and check and it will be nine so

1766
01:30:05,760 --> 01:30:09,199
let's try running and

1767
01:30:09,199 --> 01:30:12,320
um is it main that I have

1768
01:30:12,320 --> 01:30:16,040
main right is that the main yeah so

1769
01:30:16,040 --> 01:30:20,280
let's see I compiled it and then I run

1770
01:30:20,280 --> 01:30:23,520
out so this is p this is Q after I

1771
01:30:23,520 --> 01:30:26,800
delete need it I cleared out that that

1772
01:30:26,800 --> 01:30:29,760
uh memory on the Heap and once I do

1773
01:30:29,760 --> 01:30:32,520
reference it and put nine in there p and

1774
01:30:32,520 --> 01:30:34,760
Q the reference is still

1775
01:30:34,760 --> 01:30:36,440
nine

1776
01:30:36,440 --> 01:30:41,560
so very bad very bad Arrow very bad bug

1777
01:30:41,560 --> 01:30:43,440
and that's something that we could plant

1778
01:30:43,440 --> 01:30:46,600
in our um assignments for you to say

1779
01:30:46,600 --> 01:30:48,760
here is the piece of code that please

1780
01:30:48,760 --> 01:30:51,239
fits and then you'll have to figure out

1781
01:30:51,239 --> 01:30:54,320
why is that right um so if you think

1782
01:30:54,320 --> 01:30:58,320
these examples are contrived our cute

1783
01:30:58,320 --> 01:31:01,159
collaborators say that they do ask

1784
01:31:01,159 --> 01:31:03,800
questions on interviews about Heap about

1785
01:31:03,800 --> 01:31:07,119
stack and about pointers so this is

1786
01:31:07,119 --> 01:31:09,040
important right so let's go through

1787
01:31:09,040 --> 01:31:10,800
these examples and try to understand

1788
01:31:10,800 --> 01:31:13,000
exactly what's going on okay so this is

1789
01:31:13,000 --> 01:31:16,560
Insidious bug like really really bad

1790
01:31:16,560 --> 01:31:19,040
stuff bug I don't know how to spell it

1791
01:31:19,040 --> 01:31:20,960
Insidious

1792
01:31:20,960 --> 01:31:24,440
bug um so in order to fit said if you

1793
01:31:24,440 --> 01:31:27,800
delete something assign things to assign

1794
01:31:27,800 --> 01:31:31,320
null pointers to them right away then

1795
01:31:31,320 --> 01:31:34,000
it's easy to check and deleting it again

1796
01:31:34,000 --> 01:31:36,480
will not hurt but it's easy to

1797
01:31:36,480 --> 01:31:40,000
check that it's no you can just say if

1798
01:31:40,000 --> 01:31:41,159
something is

1799
01:31:41,159 --> 01:31:43,960
null that means you need to again Ask

1800
01:31:43,960 --> 01:31:45,600
for new memory for it if you want to

1801
01:31:45,600 --> 01:31:47,679
hold something to

1802
01:31:47,679 --> 01:31:52,719
it okay now number three what about

1803
01:31:52,840 --> 01:31:54,960
that

1804
01:31:54,960 --> 01:31:58,639
okay so I have P

1805
01:31:58,639 --> 01:32:01,440
pointer nothing so far very dangerous

1806
01:32:01,440 --> 01:32:03,480
here too if you have a pointer hanging

1807
01:32:03,480 --> 01:32:05,760
there what if you try to deference it

1808
01:32:05,760 --> 01:32:07,000
and put something in there you don't

1809
01:32:07,000 --> 01:32:08,360
know where it's going to be it's in some

1810
01:32:08,360 --> 01:32:10,880
limbo some location so we know that

1811
01:32:10,880 --> 01:32:12,920
that's that's what this is that problem

1812
01:32:12,920 --> 01:32:15,719
actually now integer X has five it's

1813
01:32:15,719 --> 01:32:21,040
also on stack now I say p is pointing to

1814
01:32:21,040 --> 01:32:23,679
S so that the value of it is the address

1815
01:32:23,679 --> 01:32:27,760
of that's good now I say delete X and

1816
01:32:27,760 --> 01:32:30,360
delete operation only is allowed for

1817
01:32:30,360 --> 01:32:32,880
pointers X is an integer so this is a

1818
01:32:32,880 --> 01:32:35,080
compilation

1819
01:32:35,080 --> 01:32:37,920
error you'll just say well delete nether

1820
01:32:37,920 --> 01:32:41,000
pointer it it will be very easy to fix

1821
01:32:41,000 --> 01:32:44,800
and then you can say um delete p and p

1822
01:32:44,800 --> 01:32:46,320
equals to

1823
01:32:46,320 --> 01:32:49,880
n okay so then the next number four what

1824
01:32:49,880 --> 01:32:52,400
about number

1825
01:32:52,840 --> 01:32:55,520
four yeah we already did it right we did

1826
01:32:55,520 --> 01:32:58,960
it with the binky when Binky broke down

1827
01:32:58,960 --> 01:33:00,040
but it's

1828
01:33:00,040 --> 01:33:03,639
the same thing but let's draw it so we

1829
01:33:03,639 --> 01:33:04,520
have

1830
01:33:04,520 --> 01:33:07,639
P points to Nowhere or limbo of some

1831
01:33:07,639 --> 01:33:11,760
sort X is five you reference p and put X

1832
01:33:11,760 --> 01:33:14,280
in there you cannot de reference it SE

1833
01:33:14,280 --> 01:33:16,560
fault or go somewhere and puts five

1834
01:33:16,560 --> 01:33:19,199
where you don't want it to be so this is

1835
01:33:19,199 --> 01:33:22,360
also very bad also a bu but could be

1836
01:33:22,360 --> 01:33:24,520
runtime so here at least it could be

1837
01:33:24,520 --> 01:33:28,119
runtime sometimes runtime

1838
01:33:28,119 --> 01:33:31,760
error run it on your pcnc or on your

1839
01:33:31,760 --> 01:33:34,080
laptop and see if you have runtime or if

1840
01:33:34,080 --> 01:33:37,960
actually it works fine okay so this is

1841
01:33:37,960 --> 01:33:41,040
exactly where we are that's good 45

1842
01:33:41,040 --> 01:33:44,080
minutes now next time we'll play more

1843
01:33:44,080 --> 01:33:47,679
with um we'll have a couple of

1844
01:33:47,679 --> 01:33:51,320
more with uh questions about pointers

1845
01:33:51,320 --> 01:33:55,719
but we'll also start on arrays

1846
01:34:23,440 --> 01:34:27,000
okay you guys online are all

1847
01:34:33,840 --> 01:34:37,280
good good

1848
01:34:38,920 --> 01:34:41,480
I

1849
01:34:41,480 --> 01:34:43,280
now

1850
01:34:43,280 --> 01:34:46,320
recording you

1851
01:34:46,320 --> 01:34:50,639
guys don't draw I hope everybody works

1852
01:34:50,639 --> 01:34:52,639
it works out for

1853
01:34:52,639 --> 01:34:55,320
everybody can I ask you about something

1854
01:34:55,320 --> 01:34:59,600
so when I tried this intro uh well okay

1855
01:34:59,600 --> 01:35:04,880
when I tried to uh work on this V

1856
01:35:04,880 --> 01:35:08,360
so I installed it in this yeah yeah yeah

1857
01:35:08,360 --> 01:35:11,440
yeah when I tried to do it on my profile

1858
01:35:11,440 --> 01:35:12,960
with like

1859
01:35:12,960 --> 01:35:17,080
um when I try to open command proms with

1860
01:35:17,080 --> 01:35:19,840
administrator rights it didn't work and

1861
01:35:19,840 --> 01:35:22,360
it only worked when I did everything

1862
01:35:22,360 --> 01:35:25,800
inside my istrator profile yeah do you

1863
01:35:25,800 --> 01:35:31,040
think you know what wait wait wait where

